**************************************************************************************
bech32 prefix 的配置信息通过环境变量动态指定
**************************************************************************************
     --------------- 原始 -------------------
    #export Bech32PrefixAccAddr="iaa" faa
    #export Bech32PrefixAccPub="iap"  fap
    #export Bech32PrefixValAddr="iva" fva
    #export Bech32PrefixValPub="ivp"  fvp
    #export Bech32PrefixConsAddr="ica" fca
    #export Bech32PrefixConsPub="icp" fcp
     ----------------------------------------

1. 下载代码
2. gedit /Users/sherlock/go/src/github.com/irisnet/irishub/tools/script/setBechPrefix.sh
    export Bech32PrefixAccAddr="gaa"
    export Bech32PrefixAccPub="gab"
    export Bech32PrefixValAddr="gvc"
    export Bech32PrefixValPub="gvd"
    export Bech32PrefixConsAddr="gce"
    export Bech32PrefixConsPub="gcf"

3. source /Users/sherlock/go/src/github.com/irisnet/irishub/tools/script/setBechPrefix.sh
    验证
    echo $Bech32PrefixAccAddr

4.
make install
go run /Users/sherlock/go/src/github.com/irishub_auto/autotest-cmd/autoStart/lanchIris.go 1

5.
// gaa gab => faa fap
iriscli keys list
// gvc gvd => fva fvp
iriscli stake validators
//     gcf =>     fcp  (fca暂时没有办法测)
iris tendermint show-validator




**************************************************************************************
    iris add-genesis-account
**************************************************************************************
iris add-genesis-account faa1lcuw6ewd2gfxap37sejewmta205sgssmv5fnju 200iris,20.4iris-milli --home=/Users/sherlock/testnet/v0/iris
gedit /Users/sherlock/testnet/v0/iris/config/genesis.json

---
cd ~
rm -rf .iriscli .iris testnet
iris testnet --v=1 --output-dir=/Users/sherlock/testnet  --node-dir-prefix=v --starting-ip-address=127.0.0.1
【加入上面的】
iris start --home=/Users/sherlock/testnet/v0/iris
iriscli bank account faa1lcuw6ewd2gfxap37sejewmta205sgssmv5fnju


**************************************************************************************
    iristool (通过faa查出其他地址，或者反查) 。 反序列化 解析TX交易
**************************************************************************************
iristool debug addr faa1lcuw6ewd2gfxap37sejewmta205sgssmv5fnju
iristool debug addr fca1lcuw6ewd2gfxap37sejewmta205sgssmsa55dc
iristool debug pubkey fvp1zcjduepq5rcpk6efzreexwwmp7pl7k47asyh4lrp3y85sd86ytlz0sz02k0q7l8jfs
iristool debug pubkey fap1zcjduepq5rcpk6efzreexwwmp7pl7k47asyh4lrp3y85sd86ytlz0sz02k0qpkwgzw

其中： iristool debug addr faa1lcuw6ewd2gfxap37sejewmta205sgssmv5fnju
{
    Address (Hex): FE38ED65CD52126E863E8665976D7D53E904421B
    Bech32 Acc: faa1lcuw6ewd2gfxap37sejewmta205sgssmv5fnju
    Bech32 Val: fva1lcuw6ewd2gfxap37sejewmta205sgssme9ru0m
    Bech32 Cons: fca1lcuw6ewd2gfxap37sejewmta205sgssmsa55dc
}

反序列化 解析TX交易：
    ====
    交易 tx 返回高度
    http://10.1.2.168:26657/block?height=3320 得到 txs中tx
    iristool debug tx  mgLZHnawCoABKpckrAo8ChRR6dnhekT/4VmzZuNfHOHhXDwS9hIkCglpcmlzLWF0dG8SFzIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwEjwKFP447WXNUhJuhj6GZZdtfVPpBEIbEiQKCWlyaXMtYXR0bxIXMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDASIwodCglpcmlzLWF0dG8SEDQwMDAwMDAwMDAwMDAwMDAQoJwBGmwKJuta6YchArpvEfXpMeqnKqQmI+uH7+YVL2bTNVk6NWx5FeWmsb7DEkCXO6Ugvfxb1jvYrq99V1jXIbhRZH/QfOh2ncAytziqWka0cXvYT+6dFAbhWfkA6WV1OhewF+DfELz/IFx6ty7XIAE=
    ====


**************************************************************************************
    block gas limit （超过gas将不被打包）
    //需要改代码， 用定制版
    //目的是为了测试一个block中只能包含小于指定gas的数据
    //发两笔交易超过gas限制。有两道门， 第一道门需要改代码才可以进去， 需要验证的是第二道门 proposer 一个块的时候 gas不能大于7000.
**************************************************************************************
1. 编译指定代码， 把原irisnet重命名， 覆盖irisnet,  dep+install
2. 启动iris， （用t来启动测试网 中间停一下 修改genesis）
   修改 block_size->max_gas 10000
   修改 block间隔 8秒
   // 备注一个send大约4000gas

3. 分别在一个块的开始执行下列操作 sequence 1-2-3

echo 1234567890 | iriscli bank send --amount=5iris --fee=0.004iris --gas=4999 --chain-id=shilei-qa --from=v0 --to=faa1lcuw6ewd2gfxap37sejewmta205sgssmv5fnju  --async --sequence=1 && echo 1234567890 | iriscli bank send --amount=5iris --fee=0.004iris --gas=4999 --chain-id=shilei-qa --from=v0 --to=faa1lcuw6ewd2gfxap37sejewmta205sgssmv5fnju  --async --sequence=2 && echo 1234567890 | iriscli bank send --amount=5iris --fee=0.004iris --gas=4999 --chain-id=shilei-qa --from=v0 --to=faa1lcuw6ewd2gfxap37sejewmta205sgssmv5fnju  --async --sequence=3

返回：
async tx sent (tx hash: 1D1C9661E1504682F3E824484BDAFD075CF3D6E593CAB46C032E9051DEC92F01)
async tx sent (tx hash: DE29F3D5FAF2E43C6269D8BFA50B24274C742377BC1DFA78B7E0CBF6D0777CB2)
async tx sent (tx hash: 256578FA0CD10EE8427385E164DC91C3AB351CD17F689D2B2CEB224B8E65E94C)

此时观察iris log会出现：
module=state height=15 validTxs=2 invalidTxs=1
//2条交易valid（4000+4000）， 1条交易invalid（4000这个加上就超过10000了）

执行：
iriscli tendermint tx --trust-node F41BA083597A3F25D3C0382E33D5E3C4B02FE24E4DEED7275F7892AD0E486559  // 查看result字段显示正常
iriscli tendermint tx --trust-node E1FADC2EFD15C7A928E00B1C1ADA42941ECA29752F87C1FD227D987E392F20E8  // 查看result字段显示正常
iriscli tendermint tx --trust-node 657B43FBA7B4D877963BE43DA51E8B0131147744245CF613D2A13111791BE241  // 查看result字段显示 out of gas in location: block gas meter


其他：
//这条直接拒绝 超过10000了， 超时了也未能被打包
echo 1234567890 | iriscli bank send --amount=5iris --fee=0.004iris --gas=10001 --chain-id=shilei-qa --from=v0 --to=faa1lcuw6ewd2gfxap37sejewmta205sgssmv5fnju




**************************************************************************************
   mint inflation 相关概念和查询
**************************************************************************************
每个块默认增发 = （20亿*0.04）/(365.25*24*3600) * 5s = 12.5iris  (修改出块时间不影响这个值， 也就是出块时间减少， 每年增发会变多)

起单节点 每隔20块 停一下 ， 执行
echo y | rm /Users/sherlock/genesis.json
iris export --for-zero-height --home=/Users/sherlock/testnet/v0/iris --output-file=/Users/sherlock/genesis.json
可以看到account中每次增加 12.5*20 =250iris

也可以在 26657的rpc接口查每个块的增发
http://10.1.2.168:26657/block_results?height=2
中的tags中的2， value="MTI2NzUyMzUxMjU2MTE1ODAwOTRpcmlzLWF0dG8="
Base64 decode ，https://www.base64decode.net/
12675235125611580094iris-atto （12.6iris）


**************************************************************************************
   sentry  哨兵节点
**************************************************************************************
1. iriscli status //获取验证人节点"id": "85ff3a906a27999d23cdf72451414e045ae39e84",
2. 暂停主节点
3. 新页面， iris init --moniker=sentry --home=/Users/sherlock/sentry  //获取sentry节点"id" = bccb80864e540af719fa1be6ae913ce50a74feaf
4. 自动在home目录创建 sentry， copy验证人节点 genesis.json文件复制到 /Users/sherlock/sentry/config/
5. sentry节点 /Users/sherlock/sentry/config/config.toml进行编辑：
    private_peer_ids="85ff3a906a27999d23cdf72451414e045ae39e84" //设置验证节点id
    改3个5 改成6
    保存
6. iris start --home=/Users/sherlock/sentry  //启动sentry节点
7. 验证节点 /Users/sherlock/testnet/v0/iris/config/config.toml进行编辑：
    persistent_peers = "bccb80864e540af719fa1be6ae913ce50a74feaf@127.0.0.1:26666"  //设置sentry节点id， 26666是上面改的
    pex=false //pex=false 不与其他节点进行peers交换
    保存
8. iris start --home=/Users/sherlock/testnet/v0/iris //启动验证人节点， 2个节点同步
9. 使用sentry节点 (一般只暴露哨兵节点)
   echo 1234567890 | iriscli bank send --amount=1iris --fee=0.004iris  --chain-id=shilei-qa --from=v0 --to=faa1lcuw6ewd2gfxap37sejewmta205sgssmv5fnju --commit --node=http://10.1.2.168:26667
   使用验证人节点
   echo 1234567890 | iriscli bank send --amount=1iris --fee=0.004iris  --chain-id=shilei-qa --from=v0 --to=faa1lcuw6ewd2gfxap37sejewmta205sgssmv5fnju --commit --node=http://10.1.2.168:26657


*******************************************
    测试prometheus
*******************************************
暂停链
subl /Users/sherlock/testnet/v0/iris/config/config.toml
prometheus = true
起链

http://localhost:26660/



************************************************
                linux 安装go
************************************************
删除 /usr/local/go
tar  -C /usr/local  -zxf   go1.11.linux-amd64.tar.gz

gedit ~/.bashrc
    export GOROOT=/usr/local/go
    export GOPATH=/Users/sherlock/go
    export PATH=$PATH:/Users/sherlock/go/bin:$GOROOT/bin

source ~/.bashrc
go version
go env

#自己写个test.go 在/Users/sherlock/go/package/src/test目录下
package main
import "fmt"
func main() {
    fmt.Printf("Hello, world.\n")
}
go build test.go，生成了test的文件; 　
或者直接执行 go run test.go 测试

测试 go verison


*******************************************
    linux  编译mac版本 (编译后复制到mac上 需要先运行 chmod -r 777 iriscli)
*******************************************

build_mac: update_irislcd_swagger_docs echo_bech32_prefix
	GOOS=darwin GOARCH=amd64 go build $(BUILD_FLAGS) -o build/iris ./cmd/iris && \
	GOOS=darwin GOARCH=amd64 go build $(BUILD_FLAGS) -o build/iriscli ./cmd/iriscli && \
	GOOS=darwin GOARCH=amd64 go build $(BUILD_FLAGS) -o build/irislcd ./cmd/irislcd && \
	GOOS=darwin GOARCH=amd64 go build $(BUILD_FLAGS) -o build/iristool ./cmd/iristool


*******************************************
    mac 编译linux (编译后复制到linux上 需要先运行 chmod -r 777 iriscli)
*******************************************
cd /Users/sherlock/go/src/github.com/irishub
make build_linux
生成目录：
/Users/sherlock/go/src/github.com/irishub/build


*****************************
    ubuntu打开 26657 30317端口
*****************************
ufw allow 26657 && ufw enable
验证 http://120.79.226.163:26657
iriscli status (此时rest 还没有开)

打开rest接口 （ufw allow 30317 && ufw enable）
irislcd start --node=tcp://localhost:26657 --laddr=tcp://0.0.0.0:30317 --chain-id=shilei-qa --trust-node
验证 http://10.1.2.168:30317/keys


*****************************
    monitor相关知识
*****************************
【注意 带--home都是iris操作，  iriscli都是有本地用户的操作】

ubuntu：
ufw allow 46657 && ufw enable （46657 ： iris -> iriscli monitor 的端口，rpc端口）
ufw allow 26660 && ufw enable （26660 ： iriscli monitor -> prometheus 的端口，metrics端口）
ufw allow 1317 && ufw enable （1317 rest api端口）

centos：
firewall-cmd --zone=public --add-port=26657/tcp --permanent
firewall-cmd --zone=public --add-port=30137/tcp --permanent
firewall-cmd --reload && systemctl restart firewalld.service

iriscli monitor -n=tcp://10.1.2.168:46657 （iris哪里log应该正常 没有红色）

验证 curl http://120.79.226.163:26660 （外网再验证）

打开rest端口
irislcd start --node=tcp://localhost:26657 --laddr=tcp://0.0.0.0:30317 --chain-id=shilei-qa --trust-node
http://120.79.226.163:1317/keys

*****************************
    api兼容性测试
*****************************
【看一下这些接口 在最新iris17下， 分别用lcd16 和 17同时使用， 看调用和返回的数值是否一致】
/node-info

/tx/broadcast
/tx/broadcast?commit=false&async=false&simulate=false
/tx/broadcast?simulate=true
/txs
/txs/{hash}

/block-results
/blocks/{height}
/blocks/latest

/bank/accounts/{address}
/bank/accounts/[$delegatorAddr]

/stake/delegators/[$delegatorAddr]/delegations
/stake/delegators/${addr}/redelegations
/stake/delegators/[$delegatorAddr]/validators
/stake/delegators/[$delegatorAddr]/delegations/[$validatorAddr]
/stake/delegators/{delegatorAddr}/validators/{validatorAddr}
/stake/delegators/[$delegator]/unbonding-delegations
/stake/delegators/[$deelegator]/unbonding_delegations/[$validatorAddr]
/stake/delegators/{delegatorAddr}/unbonding-delegations

/stake/validators/[$validatorAddr]
/stake/validators
/stake/validators?page=${page}&size=${perPage}
/stake/pool
/stake/parameters

/gov/proposals
/distribution/${addr}/withdraw-address
/distribution/{address}/rewards
/slashing/validators/${validatorPubKey}/signing-info
/slashing/validators/{validatorPubKey}/signing_info

