spec:
https://gitlab.bianjie.ai/irishub/internal-spec/tree/v0.17.0/service

oracle
https://gitlab.bianjie.ai/irishub/internal-spec/tree/v0.17.0/oracle

irislcd start --node=tcp://localhost:26657 --laddr=tcp://0.0.0.0:1317 --chain-id=shilei-qa --home=$HOME/.iriscli/ --trust-node


autoStart c 1

iris start --home=/Users/sherlock/testnet/v0/iris
================
iriscli keys list
iriscli keys show v0 --address
iriscli bank account $(iriscli keys show v0 --address)

iriscli keys add v1 --recover
caught below output final blast sun elevator labor regular palm dizzy stand arctic judge cost typical confirm people dust panic still aspect sword save

echo 1234567890 | iriscli bank send --amount=21iris --fee=0.004iris --commit --chain-id=shilei-qa --from=v0 --to=faa1lcuw6ewd2gfxap37sejewmta205sgssmv5fnju
iriscli bank account faa1lcuw6ewd2gfxap37sejewmta205sgssmv5fnju




================================================================================
================================================================================
================================================================================
================================================================================
                            service 定义、绑定
================================================================================
================================================================================
================================================================================
================================================================================


     ===========================
                定义
     ===========================
1. [交易] 服务定义， 首位要是字母
//"additionalProperties": false  非指定字段不可添加

echo 1234567890 | iriscli service define --chain-id=shilei-qa --from=v0 --fee=0.004iris --description=service-description --author-description=author-description --tags=tag1,tag2 --schemas=/Users/sherlock/my_workspace/service/schemas.json --commit --name=a001

2. 服务定义查询 （可以查询 method id）
iriscli service definition a001

     ===========================
                绑定
     ===========================
3. [交易] 服务绑定
//注意一定要是绑定状态 后面request的才可以被查到
//一定要绑20000 ，绑10000一旦扣款就会下线
echo 1234567890 | iriscli service bind --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit --deposit=20000iris --min-resp-time=5 --pricing=/Users/sherlock/my_workspace/service/pricing.json --service-name=a001

--- v1
echo 1234567890 | iriscli service bind --chain-id=shilei-qa --from=v1 --fee=0.004iris --commit --deposit=20000iris --min-resp-time=5 --pricing=/Users/sherlock/my_workspace/service/pricing.json --service-name=a001

4. 查询服务绑定
iriscli service binding a001 $(iriscli keys show v0 --address)
iriscli service bindings a001


5. [交易] 更新绑定 ,只增加抵押
echo 1234567890 | iriscli service update-binding a001 --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit --deposit=2iris --pricing=/Users/sherlock/my_workspace/service/pricing.json

6. [交易] 设置提取地址
echo 1234567890 | iriscli service set-withdraw-addr --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit faa1czvr4zpcza6p472wqx385tcdnkxfdg9et8s2aq

//查询提取地址
iriscli service withdraw-addr $(iriscli keys show v0 --address)

7.服务失效
echo 1234567890 | iriscli service disable a001 --chain-id=shilei-qa --from=v0 --fee=0.3iris --commit

8.服务恢复 ，可以增加抵押
echo 1234567890 | iriscli service enable a001 --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit --deposit=1iris

9. [交易] 取回抵押 (滞后 COMPLAINT_RETROSPECT (Gov) + ARBITRATION_TIMELIMIT (Gov))
echo 1234567890 | iriscli service refund-deposit a001 --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit

【通过命令可以看当前时间】 date -u "+%Y-%m-%dT%H:%M:%SZ"

iriscli bank account $(iriscli keys show v0 --address)



================================================================================
================================================================================
================================================================================
================================================================================
                       service 调用 （单次 和 重复）
================================================================================
================================================================================
================================================================================
================================================================================


1. 服务调用
1）批量请求 //需要一个服务有2个以上绑定着，data必须是json而且目前不能用文件
// 如果timeout<min-resp-time , call将会被筛选后忽略
// --super-mode 确认是不是profiler调用， 如果是的话 超时不收slash费用。查询时用tag[1] fee=0 supermode=true
// 注意 data里面的数据和当时定义的时候要对应上， 如果是required则一定要
// 跟新绑定的price后 ，request ， service-fee也会跟着跟新，只要不大于service-fee-cap。

//单个
echo 1234567890 | iriscli service call --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit --service-name=a001  --timeout=20 --service-fee-cap=1iris --data="{\"id\": \"1234\",\"name\": \"bianjie\",\"data\": \"facedata\"}" --providers=$(iriscli keys show v0 --address)

//重复
echo 1234567890 | iriscli service call --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit --service-name=a001 --service-fee-cap=1iris --data="{\"id\": \"1234\",\"name\": \"bianjie\",\"data\": \"facedata\"}" --providers=$(iriscli keys show v0 --address) --timeout=20 --repeated --frequency=20 --total=-1


2.查询请求列表
//通过这个 可以查到 Request	ID（第一条）
//超时后就查不到了, 除非用重复的（注意重复的情况下，request id每轮都会变）
//特别注意 查不到内容时可能是没有绑定，也可能是钱被扣除到最小抵押额下面了。
iriscli service requests a001 $(iriscli keys show v0 --address)
iriscli service request 21568201D4A92D52C1A6352103D21470331AE79556294C6DA3BF16FA2E4B70B60000000000000000000000000000000300000000000000F20000

//用<request-context-id>超时后可以查到
iriscli service requests 21568201D4A92D52C1A6352103D21470331AE79556294C6DA3BF16FA2E4B70B60000000000000000 1

3.相应请求
//因为速度比较快，要连续操作， 20块*2秒就超时了
//上下文context-id 管整个循环，request-id 管单次请求。

1）调用
echo 1234567890 | iriscli service call --chain-id=shilei-qa --from=v1 --fee=0.004iris --commit --service-name=a001  --timeout=100 --service-fee-cap=1iris --data="{\"id\": \"1234\",\"name\": \"bianjie\",\"data\": \"facedata\"}" --providers=$(iriscli keys show v0 --address)

2）查request-id，后面查response要用
iriscli service requests a001 $(iriscli keys show v0 --address)

3）调用response
//code=200成功，需提供output。非200表示处理有问题(400是consumer的参数问题，500是provider的问题)。
//当code为200时，如果给定的output不符合定义时的output schema，会slash provider 和refund consumer。
echo 1234567890 | iriscli service respond --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit --data="{\"data\": \"userdata\"}" --result='{"code":200,"message":"it500"}' --request-id=$(iriscli service requests a001 $(iriscli keys show v0 --address) -o=json | jq -r .[0].id)

4）查询相应请求 ，用"2）"返回request id
iriscli service response 21568201D4A92D52C1A6352103D21470331AE79556294C6DA3BF16FA2E4B70B60000000000000000000000000000000A000000000000017E0000


     ===========================
       取回服务调用产生的服务费（卖家），未响应超时的服务费会自动退还给（买家）
     ===========================
1.查询服务费
iriscli service fees $(iriscli keys show v0 --address)


2.提取服务调用产生的服务费
echo 1234567890 | iriscli service withdraw-fees --chain-id=shilei-qa --from=v0 --fee=0.004iris --fee=0.004iris --commit
// iriscli bank account faa1czvr4zpcza6p472wqx385tcdnkxfdg9et8s2aq

3. trustee提取服务费税
//先查询下 fee税多少钱
iriscli bank account faa1d5e6g6fuddkndvg9nhyljwp2sya2qyk9keyu4d

//目前amount支持iris-atto 不支持iris 下面是10iris
echo 1234567890 | iriscli service withdraw-tax $(iriscli keys show v0 --address) 0.005iris --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit


     ===========================
      请求上下文相关
     ===========================
1. 查询请求上下文 <request-context-id>， 返回这个call的很多字段信息
iriscli service request-context 21568201D4A92D52C1A6352103D21470331AE79556294C6DA3BF16FA2E4B70B60000000000000000
//查询request id
iriscli service requests a001 $(iriscli keys show v0 --address)

2. 暂停请求上下文
// state变成pause
// 非repeated 不能pause
echo 1234567890 | iriscli service pause --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit 21568201D4A92D52C1A6352103D21470331AE79556294C6DA3BF16FA2E4B70B60000000000000000

3. 启动请求上下文
//state变成running , BatchState在complete状态也会变running
echo 1234567890 | iriscli service start --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit 21568201D4A92D52C1A6352103D21470331AE79556294C6DA3BF16FA2E4B70B60000000000000000

4. 更新请求上下文
echo 1234567890 | iriscli service update --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit  --frequency=20 --total=300 21568201D4A92D52C1A6352103D21470331AE79556294C6DA3BF16FA2E4B70B60000000000000000

5. 终止请求上下文
// state变成complete
// 非repeated 不能kill
echo 1234567890 | iriscli service kill --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit  D1CA04D63DB06F373606ECD4AEBDB4287455358D0117806C2BF886669BCD47B60000000000000000

6. 查询请求上下文的请求列表 （注意价格不到的请求是会被过滤掉）
//列表只有有效的才会被查出， 但是iriscli service request-context 永远能查出）
iriscli service request-context 6A8C3745243EA7BFB23952AD491F782EB8BF92A37DDC1F578A2482596148B6E70000000000000000

7. 查询请求上下文的响应列表（后面是request id）
iriscli service response 69914805ee50573828580f941e92a852dfd0ee62d4f0f5e77deff111e414d1cb00000000000000420000
iriscli service responses <request-context-id> <batch-counter>

================================================================================
================================================================================
oracle
================================================================================
================================================================================

1. Create Feed
//创建feed的同时相当于创建了一个service call
//threshold 不能大约provider的个数
//State初始=pause
//--value-json-path="data.user.name"
echo 1234567890 | iriscli oracle create --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit --description=description --latest-history=10 --service-name=a001 --input="{\"id\": \"1234\",\"name\": \"bianjie\",\"data\": \"facedata\"}" --providers=$(iriscli keys show v0 --address) --service-fee-cap=1iris --timeout=20 --frequency=20 --threshold=1 --aggregate-func="avg" --value-json-path="data" --feed-name=f001

2. Query Feed
iriscli oracle query-feed f001

3. Start Feed
//State=running
echo 1234567890 | iriscli oracle start f001 --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit

4. Pause Feed
//State=pause
echo 1234567890 | iriscli oracle pause f001 --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit

5. Update Feed
echo 1234567890 | iriscli oracle edit f001 --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit --latest-history=1
// --providers=faa1r3tyupskwlh07dmhjw70frxzaaaufta37y25yr --service-fee-cap=1iris --timeout=5 --frequency=5 --total=-1 --threshold=1 --description  --latest-history --service-fee-cap --timeout --frequency --total --threshold

6. Query Feeds
iriscli oracle query-feeds --state=running
iriscli oracle query-feeds --state=paused

//直接搜出所有的
iriscli oracle query-feeds


7. Query Value
iriscli oracle query-value f001

    **************
    单人响应
    **************
echo 1234567890 | iriscli service respond --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit --request-id=$(iriscli service requests a001 $(iriscli keys show v0 --address) -o=json | jq -r .[0].id) --data="{\"data\": \"100\"}" --result='{"code":200,"message":"ok"}'

iriscli oracle query-value f001


    **************
    多人响应
    **************
    //同一个call， RequestContextID是的同一个。 但是针对于不同的provider的RequestID都是不一样的， 而且同一个provider每轮的RequestID也是不一样的

//先要创建v1 recover，转账
iriscli keys add v1 --recover
caught below output final blast sun elevator labor regular palm dizzy stand arctic judge cost typical confirm people dust panic still aspect sword save

echo 1234567890 | iriscli bank send --amount=100000iris --fee=0.004iris --commit --chain-id=shilei-qa --from=v0 --to=faa1lcuw6ewd2gfxap37sejewmta205sgssmv5fnju

//增加一个provider v1
echo 1234567890 | iriscli oracle edit f001 --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit --latest-history=10 --providers=$(iriscli keys show v0 --address),$(iriscli keys show v1 --address)

//v1也要绑定， 不绑定就不能respond
echo 1234567890 | iriscli service bind --chain-id=shilei-qa --from=v1 --fee=0.004iris --commit --deposit=20000iris --min-resp-time=5 --pricing=/Users/sherlock/my_workspace/service/pricing.json --service-name=a001

//等一会儿，到下一轮，两个都可以查到了，此条不用执行
iriscli service requests a001 $(iriscli keys show v0 --address)
iriscli service requests a001 $(iriscli keys show v1 --address)

//v0 ， v1 ：分别response 1次，共2次
echo 1234567890 | iriscli service respond --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit --request-id=$(iriscli service requests a001 $(iriscli keys show v0 --address) -o=json | jq -r .[0].id) --data="{\"data\": \"100\"}" --result='{"code":200,"message":"ok"}'

echo 1234567890 | iriscli service respond --chain-id=shilei-qa --from=v1 --fee=0.004iris --commit --request-id=$(iriscli service requests a001 $(iriscli keys show v1 --address) -o=json | jq -r .[0].id) --data="{\"data\": \"200\"}" --result='{"code":200,"message":"ok"}'

//查询结果，等到一轮timeout以后出结果， 如果出现150就说明成功了，取了2个的均值。
iriscli oracle query-value f001



================================================================================
================================================================================
使用iservice 自动调用
================================================================================
================================================================================

    **************
    iservice-demo
    **************
//下载编译
cd /Users/sherlock/go/src/github.com/
git clone https://github.com/chengwenxi/iservice-demo.git
cd iservice-demo
//2个参数要在代码里修改一下： PriceServiceName = "s001" ， ChainID = "shilei-qa" ，types.Commit改成 types.Sync
make install
iservice -h

//更新
cd /Users/sherlock/go/src/github.com/iservice-demo
git fetch --all
git checkout .  //放弃当前目录下的修改
git pull
//2个参数要在代码里修改一下： PriceServiceName = "s001" ， ChainID = "shilei-qa"， types.Commit改成 types.Sync
make install

    **************
    测试
    **************

//启动iris
autoStart c 1

//用iservice创建 2个provider 用户，因为后面iservice要用
iservice keys add p1
(use the above mnemonic)
iriscli keys add p1 --recover

iservice keys add p2
iriscli keys add p2 --recover

echo 1234567890 | iriscli bank send --amount=15000000iris --fee=0.004iris --commit --chain-id=shilei-qa --from=v0 --to=$(iriscli keys show p1 --address)
echo 1234567890 | iriscli bank send --amount=15000000iris --fee=0.004iris --commit --chain-id=shilei-qa --from=v0 --to=$(iriscli keys show p2 --address)


//define && bind service
//min-resp-time=5 注意 后续小于5块的请求会被过滤掉
echo 1234567890 | iriscli service define --chain-id=shilei-qa --from=v0 --fee=0.004iris --description=service-description --author-description=author-description --tags=tag1,tag2 --schemas=/Users/sherlock/go/src/github.com/iservice-demo/iservice/service/service_definition.json --commit --name=s001

echo 1234567890 | iriscli service bind --chain-id=shilei-qa --from=p1 --fee=0.004iris --commit --deposit=20000iris --min-resp-time=5 --pricing=/Users/sherlock/my_workspace/service/pricing.json --service-name=s001

echo 1234567890 | iriscli service bind --chain-id=shilei-qa --from=p2 --fee=0.004iris --commit --deposit=20000iris --min-resp-time=5 --pricing=/Users/sherlock/my_workspace/service/pricing.json --service-name=s001



//新开2个页面开始， 也可以用 & 后台运行
iservice start p1 huobi   //这个api 需要翻墙 curl https://www.google.com
iservice start p2 binance

也可以不联网 ，自己产生假数据
iservice start p1
iservice start p2


//create & start oracle feed  (link_usdt)
echo 1234567890 | iriscli oracle create --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit --latest-history=10 --service-name=s001 --input="{\"base\":\"link\",\"quote\":\"usdt\"}" --providers=$(iriscli keys show p1 --address),$(iriscli keys show p2 --address) --service-fee-cap=1iris --timeout=5 --frequency=5 --threshold=2 --aggregate-func="avg" --value-json-path="price" --feed-name=f001

//start feed
echo 1234567890 | iriscli oracle start f001 --chain-id=shilei-qa --from=v0 --fee=0.004iris --commit

//check running:
iriscli oracle query-feed f001
//response 那里每5秒钟产生2个response
//request只发一次交易产生一个context，后续的req都不再发交易了。 response确实每次返回都会产生一次交易。
//看iris log每5个块会产生2个交易
iriscli service request-context 643FC9D539F43F22938D0B8A15A292C6E4076FCBC11CA9295B534C452A0C27070000000000000000

//query feed value
iriscli oracle query-value f001

================================================================================
================================================================================
iservice 压力测试 iservice start p2之后，不要create oracle
================================================================================
================================================================================
//第一个参数 一共发出几个请求。
//第二个参数 每个请求重复几次

/Users/sherlock/my_workspace/service/test.sh 2 2




================================================================================
================================================================================
random 随机数
================================================================================
================================================================================

1.定义 自带一个service：random
iriscli service definition random

2.绑定
echo 1234567890 | iriscli service bind --chain-id=shilei-qa --from=v0 --fee=0.004iris --service-name=random --min-resp-time=5 --deposit=20000iris --pricing=/Users/sherlock/my_workspace/service/pricing.json --commit

//查询
iriscli service bindings random

3.request
echo 1234567890 | iriscli rand request-rand --chain-id=shilei-qa --from=v0 --fee=0.004iris --block-interval=10 --oracle=true --service-fee-cap=1iris --commit

// 在(0,block-interval)之内可以通过 rand模块的rand-height查到该次请求， 0是指提交请求的那一刻
    iriscli rand query-queue --queue-height=1344
    iriscli rand query-queue

// 在(block-interval, block-interval+timeout[service默认超时时间100块])只能可以通过 service模块的request-id查到该次请求
// 现在request的第一条查询已经可以现实 request-id
    iriscli service requests random $(iriscli keys show v0 --address)

1）注意记录一下：rand模块的request-id，小写的：ff4d166564e46543c536566962df0fe00f6adaedab7411fa346233231196feb6
2）注意，10块以后查询service的request-id：
    iriscli service requests random $(iriscli keys show v0 --address)
3）注意， rand的request是单次的， repeated=false

4.respond 这里会返回request-id
echo 1234567890 | iriscli service respond --chain-id=shilei-qa --from=v0 --fee=0.004iris --request-id=$(iriscli service requests random $(iriscli keys show v0 --address) -o=json | jq -r .[0].id) --data='{"seed":"3132333435363738393031323334353637383930313233343536373839303132"}' --result='{"code":200,"message":"ok"}' --commit

5.查询结果， 注意这里用的是rand模块的request-id
iriscli rand query-rand E9157B07F94E731FE3383937AB236AF677C924FEB43F31151ABB7B4559193354

================================================================================
================================================================================
iservice 没改代码版本
================================================================================
================================================================================

iservice keys add provider1
iriscli keys add provider1 --recover

iservice keys add provider2
iriscli keys add provider2 --recover

service_name=price_service
echo 1234567890 | iriscli service define --chain-id=test --from=v0 --fee=0.3iris --name=$service_name --description="provide token price" --tags=price --schemas=/Users/sherlock/go/src/github.com/iservice-demo/iservice/service/service_definition.json --commit


echo 1234567890 | iriscli bank send --from=v0 --to=$(iriscli keys show provider1 -o json | jq -r '.address') --amount=1000000iris --chain-id=test --fee=0.3iris --commit
echo 1234567890 | iriscli bank send --from=v0 --to=$(iriscli keys show provider2 -o json | jq -r '.address') --amount=1000000iris --chain-id=test --fee=0.3iris --commit

echo 1234567890 | iriscli service bind --chain-id=test --from=provider1 --fee=0.3iris --service-name=$service_name --deposit=100000iris --min-resp-time=2 --pricing=/Users/sherlock/my_workspace/service/pricing.json --commit
echo 1234567890 | iriscli service bind --chain-id=test --from=provider2 --fee=0.3iris --service-name=$service_name --deposit=100000iris --min-resp-time=2 --pricing=/Users/sherlock/my_workspace/service/pricing.json --commit

iriscli service bindings $service_name

iservice start provider1
iservice start provider2


/Users/sherlock/my_workspace/service/test.sh 1000 200

