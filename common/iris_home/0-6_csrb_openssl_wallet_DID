========================================================================================================================
========================================================================================================================
================== openssl ===============================================================================================
========================================================================================================================
========================================================================================================================
加密用的, 如果不按照testnet将不可用

======================
安装 openssl
======================
cd /Users/sherlock/go/src/github.com/
git clone https://github.com/openssl/openssl.git
cd openssl && ./config
sudo make install //注意这里一定要sudo权限


======================
单节点手动测试网（注意：不用testnet）
======================
创建 Genesis 文件并启动网络
rm -rf ~/testnet

1）、初始化 genesis.json 文件
csrb init --home=/Users/sherlock/testnet/x1/csrb --chain-id=qa-test x1

2）、创建一个初始化账户x1
csrbcli keys add x1

3）、将x1添加到genesis.json 文件，并为该账户添加'RootAdmin'权限
csrb add-genesis-account $(csrbcli keys show x1 -a) 1000000000point --home=/Users/sherlock/testnet/x1/csrb --root-admin

4）、导出验证节点x1(步骤1生成的)私钥为pem格式，方便用于申请节点证书
csrb genkey --home=/Users/sherlock/testnet/x1/csrb --out-file=/Users/sherlock/testnet/priv.pem

5）、使用步骤4中的私钥文件生成证书请求
自签证书 （大部分选项回车用默认，密码写一个）
openssl req -new -x509 -sm3 -sigopt "distid:1234567812345678" -key /Users/sherlock/testnet/priv.pem -out /Users/sherlock/testnet/cert.crt -days 365

6）、导入企业根证书
csrb set-root-cert /Users/sherlock/testnet/cert.crt --home=/Users/sherlock/testnet/x1/csrb

7）、添加x1到genesis.json文件 （add-genesis-validator）
csrb add-genesis-validator --name=x1 --cert=/Users/sherlock/testnet/cert.crt --power=100 --home=/Users/sherlock/testnet/x1/csrb --from=x1

8）、启动节点 （--pruning=nothing 所有数据都保存）
csrb start --home=/Users/sherlock/testnet/x1/csrb --pruning=nothing


======================
用证书创建新的validator（v0 自签）
======================

1）正常启动
cd ~ && rm -rf .csrbcli .csrb testnet
csrb testnet --v=1 --chain-id=qa-test --output-dir=/Users/sherlock/testnet --node-dir-prefix=v --starting-ip-address=127.0.0.1
csrb start --home=/Users/sherlock/testnet/v0/csrb

2）自签证书 （注意：这个就不用生成证书请求）
openssl req -new -x509 -sm3 -sigopt "distid:1234567812345678" -key /Users/sherlock/testnet/root_key.pem -out /Users/sherlock/testnet/cert.crt -days 365

3）通过cert.crt创建验证人
csrbcli tx validator create --name=x1 --cert=/Users/sherlock/testnet/cert.crt --power=10 --details=details --from=v0 --chain-id=qa-test --fees=4point -b block -y

csrbcli q validator list --trust-node

======================
用证书创建新的validator （普通方法）
======================
1）先正常启动，然后初始化x2
cd ~ && rm -rf .csrbcli .csrb testnet
csrb testnet --v=1 --chain-id=qa-test --output-dir=/Users/sherlock/testnet --node-dir-prefix=v --starting-ip-address=127.0.0.1
csrb start --home=/Users/sherlock/testnet/v0/csrb

csrb init --home=/Users/sherlock/testnet/x2/csrb --chain-id=qa-test x2

2）导出验证节点x2(步骤1生成的)私钥为pem格式，方便用于申请节点证书
csrb genkey --home=/Users/sherlock/testnet/x2/csrb --out-file=/Users/sherlock/testnet/priv_x2.pem

3）生成证书请求（生成key.csr）
openssl req -new -key /Users/sherlock/testnet/priv_x2.pem -out /Users/sherlock/testnet/key_x2.csr -sm3 -sigopt "distid:1234567812345678"

4）用root证书来颁发证书（输入csr，输出crt）
openssl x509 -req -in /Users/sherlock/testnet/key_x2.csr -out /Users/sherlock/testnet/key_x2.crt -sm3 -sigopt "distid:1234567812345678" -vfyopt "distid:1234567812345678" -CA /Users/sherlock/testnet/root_cert.pem -CAkey /Users/sherlock/testnet/root_key.pem -CAcreateserial

5）通过cert.crt创建验证人
csrbcli tx validator create --name=x2 --cert=/Users/sherlock/testnet/key_x2.crt --power=10 --details=details --from=v0 --chain-id=qa-test --fees=4point -b block -y

csrbcli q validator list --trust-node



=========================
不初始化节点，凭空创建一个证书
=========================
1）随机创建私钥，方便用于申请节点证书
openssl ecparam -genkey -name SM2 -out /Users/sherlock/testnet/priv_x2.pem

2）生成证书请求（生成key.csr）
openssl req -new -key /Users/sherlock/testnet/priv_x2.pem -out /Users/sherlock/testnet/key_x2.csr -sm3 -sigopt "distid:1234567812345678"

3）用root证书来颁发证书（输入csr，输出crt）
openssl x509 -req -in /Users/sherlock/testnet/key_x2.csr -out /Users/sherlock/testnet/key_x2.crt -sm3 -sigopt "distid:1234567812345678" -vfyopt "distid:1234567812345678" -CA /Users/sherlock/testnet/root_cert.pem -CAkey /Users/sherlock/testnet/root_key.pem -CAcreateserial

5）通过cert.crt创建验证人
csrbcli tx validator create --name=x2 --cert=/Users/sherlock/testnet/key_x2.crt --power=10 --details=details --from=v0 --chain-id=qa-test --fees=4point -b block -y

csrbcli q validator list --trust-node


=========================
  ED25519 编码
=========================
makefile改下第59行 ， sm2 改成 ed25519 (注意有2处 最好都要改)
cd /Users/sherlock/go/src/gitlab.bianjie.ai/csrb
make install
//编译的时候会看到algo.Algo=ed25519


openssl genpkey -algorithm ED25519 -out /Users/sherlock/testnet/priv_x3.pem
openssl req -new -key /Users/sherlock/testnet/priv_x3.pem -out /Users/sherlock/testnet/key_x3.csr
openssl x509 -req -in /Users/sherlock/testnet/key_x3.csr -out /Users/sherlock/testnet/key_x3.crt -CA /Users/sherlock/testnet/root_cert.pem -CAkey /Users/sherlock/testnet/root_key.pem -CAcreateserial
csrbcli tx validator create --name=x3 --cert=/Users/sherlock/testnet/key_x3.crt --power=10 --details=details --from=v0 --chain-id=qa-test --fees=4point -b block -y
csrbcli q validator list --trust-node





=====================================================================================================================
=====================================================================================================================
====== csrb wallet    ====================================================================================================
=====================================================================================================================
=====================================================================================================================

钱包的特性：
同一个助记词恢复钱包以后：安装顺序创建的地址都是一样的。


======================
cli端 （注意和下面的图形界面端不通用，各自独立的钱包）
======================
cd /Users/sherlock/testnet && rm -rf /Users/sherlock/testnet/keyring-file
//8位密码 ，记得要复制助记词
csrbwallet init --home=/Users/sherlock/testnet
csrbwallet update --home=/Users/sherlock/testnet
//csrbwallet update --home=/Users/sherlock/testnet --type=mnemonic 助记词恢复， 密码恢复  passphrase
csrbwallet keys create v0 --home=/Users/sherlock/testnet
csrbwallet keys show v0 --home=/Users/sherlock/testnet
csrbwallet keys list --home=/Users/sherlock/testnet
//注意：保存随机密码，import用
csrbwallet keys export v0 --home=/Users/sherlock/testnet
csrbcli keys import x0 /Users/sherlock/testnet/v0.key
csrbcli keys show x0



======================
图形界面端
======================

---
安装 bundler
---
install the bundler
go get -u github.com/asticode/go-astilectron-bundler/...
go install github.com/asticode/go-astilectron-bundler/astilectron-bundler

---
下载
---
cd /Users/sherlock/go/src/gitlab.bianjie.ai
git clone https://gitlab.bianjie.ai/csrb/csrbwallet.git
cd csrbwallet
git fetch --all

git remote add upstream  https://gitlab.bianjie.ai/csrb/csrbwallet.git
git checkout -b wallet-ue upstream/wallet-ue
git checkout wallet-ue
git branch && git rev-parse HEAD
//注意：需要翻墙，失败的情况下先git checkout .
make build

更新
cd /Users/sherlock/go/src/gitlab.bianjie.ai/csrbwallet
git pull
make build


---
打开
---
rm -rf /Users/sherlock/.csrbwallet
open /Users/sherlock/go/src/gitlab.bianjie.ai/csrbwallet/output/darwin-amd64/csrbwallet.app

另外，导出后的使用方法和cli端一样


=====================================================================================================================
=====================================================================================================================
======    DID ====================================================================================================
=====================================================================================================================
=====================================================================================================================

cd ~ && rm -rf .csrbcli .csrb testnet
csrb testnet --v=1 --chain-id=qa-test --output-dir=/Users/sherlock/testnet --node-dir-prefix=v --starting-ip-address=127.0.0.1
csrb start --home=/Users/sherlock/testnet/v0/csrb


============
新创建"空的"identity
============
//所有参数都不带， 直接生成新UUID
//记录返回id 后续使用
csrbcli tx identity create --chain-id=qa-test --from=v0 -o=json --indent -b block -y

====================================
【ecdsa加密】新创建带id，带参数的dentity【ecdsa加密】
====================================
// --id --pubkey --pubkey-algo(加密类型) --credentials(uri) --cert-file

openssl req -new -x509 -sm3 -sigopt "distid:1234567812345678" -key /Users/sherlock/testnet/root_key.pem -out /Users/sherlock/testnet/cert.crt -days 365

csrbcli tx identity create --id=67eb663eccc148adb6878743e3156c01 --pubkey=02b7a8c8144ad8e8162c2d408c55a212de459b88e04dbc5eb78d75baa11c38675c --pubkey-algo=ecdsa --credentials="credentials-uri" --cert-file=/Users/sherlock/testnet/cert.crt --chain-id=qa-test --from=v0 -o=json --indent -b block -y


*****
获取id
*****
//16字节的 16进制字符即可。即32个字符。
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA （量尺）
67eb663eccc148adb6878743e3156c01
--id=67eb663eccc148adb6878743e3156c01

*****
获取pubkey
*****
加密类型:ecdsa
http://dbis.rwth-aachen.de/~renzel/mobsos/lib/js/jsrsasign/sample-ecdsa.html （需要翻墙）
直接点生成，复制pubkey
0483d453336102a7429c9b4735031fc1a4bd74818e3d0ecc407198f5fb107a45b5bedffc88c4495059d2f014d3a82d22cd8c5e4889b660b4fb599fdf60fda1741d
去掉开头的04， 截取前32字节（1个字节8位=2个4位（一个16进制字符表示）， 也就是64个16进制的字符。）
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA （量尺）
83d453336102a7429c9b4735031fc1a4bd74818e3d0ecc407198f5fb107a45b5be
--pubkey=83d453336102a7429c9b4735031fc1a4bd74818e3d0ecc407198f5fb107a45b5be
--pubkey-algo=ecdsa

*****
获取cert-file
*****
//自签证书
openssl req -new -x509 -sm3 -sigopt "distid:1234567812345678" -key /Users/sherlock/testnet/root_key.pem -out /Users/sherlock/testnet/cert.crt -days 365

--cert-file=/Users/sherlock/testnet/cert.crt

*****
credentials
*****
就是一个字符串



====================================
修改identity
====================================
csrbcli tx identity update 67eb663eccc148adb6878743e3156c35 --credentials="credentials-uri2" --chain-id=qa-test --from=v0 -o=json --indent -b block -y

//可修改参数:
--pubkey=02b7a8c8144ad8e8162c2d408c55a212de459b88e04dbc5eb78d75baa11c38675c
--pubkey-algo=ecdsa
--credentials="credentials-uri"
--cert-file=/Users/sherlock/testnet/cert.crt


====================================
查询identity
====================================
csrbcli query identity identity --trust-node 67eb663eccc148adb6878743e3156c01


============
其他加密方法
============

//ECDSA 33  02+32 （例子已经写了）
csrbcli tx identity create --pubkey=02b7a8c8144ad8e8162c2d408c55a212de459b88e04dbc5eb78d75baa11c38675c --pubkey-algo=ecdsa --credentials="credentials-uri" --id=67eb663eccc148adb6878743e3156c01 --cert-file=/Users/sherlock/testnet/cert.crt --chain-id=qa-test --from=v0 -o=json --indent -b block -y

//ED25519 32  （实际链上不校验pubkey有效性，都是线下自己校验，长度对就行）
csrbcli tx identity create --id=67eb663eccc148adb6878743e3156c36 --pubkey=b7a8c8144ad8e8162c2d408c55a212de459b88e04dbc5eb78d75baa11c38675d --pubkey-algo=ed25519 --credentials="credentials-uri" --chain-id=qa-test --from=v0 -o=json --indent -b block -y

//SM2 03+32
csrbcli tx identity create --id=67eb663eccc148adb6878743e3156c37 --pubkey=03b7a8c8144ad8e8162c2d408c55a212de459b88e04dbc5eb78d75baa11c38675d --pubkey-algo=SM2 --credentials="credentials-uri" --chain-id=qa-test --from=v0 -o=json --indent -b block -y

//rsa和dsa
1)需要先在网站生成秘钥对 ，选择对应的ras和dsa
http://web.chacuo.net/netrsakeypair

-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDEJ2Y1+3Nb0nY88J9cEUszkZ3Z
MUEmkfuKLJFI/C/w77oRbgeN49L0oUywkc4AOI18cz42yhw7izBh7EdrZnbt9mQC
MrYDzoUbn3sKPYYQKoXiJzASE4zof1XrQBESp7uKdYnSlSewDh8BZ16ThUcIiUsA
bbPZbke3p+Tr8+eguwIDAQAB
-----END PUBLIC KEY-----

2）复制到 （打开方式文本）
/Users/sherlock/my_workspace/did/rsa.pem
或者
/Users/sherlock/my_workspace/did/dsa.pem

3）使用程序转格式
执行 demo rsa 或者 demo dsa

源代码：
func main() {
	args := os.Args
	pubKey,_ := ioutil.ReadFile("/Users/sherlock/my_workspace/did/"+args[1]+".pem") // RSA 或 DSA 公钥文件路径
	derBlock, _ := pem.Decode(pubKey)

	fmt.Printf("%s\n", hex.EncodeToString(derBlock.Bytes))
}

4）复制返回的数据
--pubkey=30(rsa较短)08 --pubkey-algo=rsa
--pubkey=30(dsa较长)08 --pubkey-algo=dsa

============
rest
============
注意： 证书那个字段（begin end）要把回车符替换成\n