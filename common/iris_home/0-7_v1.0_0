cd /Users/sherlock/go/src/github.com/irishub
git fetch --all
git checkout .
git checkout -b vincent-migrate upstream/vincent-migrate //git checkout v0.16.3 // git checkout master // git checkout vincent-migrate
git pull
git branch && git rev-parse HEAD

3aefbf231aaaaedf32bebb48488d5effb4e3b82d
//只有主网版本 没有setTestEnv.sh
make install


//go mod tidy
//iris version

================
  下载某个commit  4fcb97a4e5576d8f39034ca7599754ed3b7eb96d
================
cd /Users/sherlock/go/src/github.com/irishub
git fetch --all
git checkout .
git reset --hard ec4cd8e8c56bdf94f3805c527e0e47679aac19e4
git branch && git rev-parse HEAD


================
    某个 分支 ：
    如果别人改了新的代码  直接git pull就行了
================
cd /Users/sherlock/go/src/github.com/irishub
git fetch --all
git checkout .
git checkout -b upgrade-test upstream/upgrade-test
git pull
git branch && git rev-parse HEAD





====================
autoStart
====================
autoStart c 1
autoStart c 2
iris query bank balances -o=json $(iris keys show v0 -a) |jq
iris query bank balances -o=json $(iris keys show v1 -a) |jq


====================
【钥匙】输错系统钥匙串密码
====================
桌面>启动台>钥匙串访问>登录（右键）>锁定钥匙串登录>登录（右键）>解锁钥匙串登录


==========================================================================================
==========================================================================================
==========================================================================================
修改 stake ->iris 版本 [init起 v0不会变]
==========================================================================================
==========================================================================================
==========================================================================================

rm -rf /Users/sherlock/.iris /Users/sherlock/testnet
iris init testing --chain-id=qa-test
iris add-genesis-account $(iris keys show v0 -a) 100000000000000uiris
iris gentx v0 --chain-id=qa-test 100000000uiris
/Users/sherlock/my_workspace/waterdrop/common/iris_home/0-5_genesis.sh irishub
iris collect-gentxs
iris start

// 脚本默认打开swagger, 注意如果oracle做不了，super改下v0地址
subl /Users/sherlock/my_workspace/waterdrop/common/iris_home/0-5_genesis.sh
subl /Users/sherlock/.iris/config/genesis.json


老版本：
iris gentx v0 --chain-id=qa-test --amount=100000000uiris



=============
基础操作(bank)
=============
iris keys show v0
iris tx bank send v0 $(iris keys show v1 -a) 100000iris --fees=4iris --chain-id=qa-test -b block -y |jq
iris query bank balances -o=json $(iris keys show v0 -a) |jq

iris tx token burn iris --amount=100 --from=v0 --fees=4iris --chain-id=qa-test -b block -y |jq
iris query auth account $(iris keys show v0 -a)

==================
 [testnet起 v0会变]
==================
rm -rf /Users/sherlock/.iris /Users/sherlock/testnet
iris testnet --v=1 --output-dir=/Users/sherlock/testnet  --node-dir-prefix=v --starting-ip-address=127.0.0.1 --chain-id=qa-test
sed -i '' 's/"172800000000000"/"20000000000"/g' /Users/sherlock/testnet/v0/iris/config/genesis.json
sed -i '' 's/"1814400000000000"/"20000000000"/g' /Users/sherlock/testnet/v0/iris/config/genesis.json
sed -i '' 's/"500000000"/"50000000000000"/g' /Users/sherlock/testnet/v0/iris/config/genesis.json
iris start --home=/Users/sherlock/testnet/v0/iris

所有交易后面可以加  |jq 看返回

subl /Users/sherlock/testnet/v0/iris/config/genesis.json
====================
rest （api测试）
====================
先暂停链rest // subl /Users/sherlock/.iris/config/app.toml
sed -i '' 's/swagger = false/swagger = true/g'  /Users/sherlock/.iris/config/app.toml
sed -i '' 's/enable = false/enable = true/g'  /Users/sherlock/.iris/config/app.toml
iris start

http://localhost:1317/swagger/


//testnet
sed -i '' 's/swagger = false/swagger = true/g' /Users/sherlock/testnet/v0/iris/config/app.toml
sed -i '' 's/enable = false/enable = true/g'  /Users/sherlock/testnet/v0/iris/config/app.toml
iris start --home=/Users/sherlock/testnet/v0/iris


====================
用init自己起（注意这里要用uiris）
===================
rm -rf /Users/sherlock/.iriscli /Users/sherlock/.iris /Users/sherlock/testnet
iris init --home=/Users/sherlock/testnet/v0/iris --chain-id=qa-test v0
iris add-genesis-account $(iris keys show v0 --address) 100000000000000uiris --home=/Users/sherlock/testnet/v0/iris
iris gentx --home=/Users/sherlock/testnet/v0/iris --chain-id=qa-test v0
iris collect-gentxs --home=/Users/sherlock/testnet/v0/iris
iris start --home=/Users/sherlock/testnet/v0/iris
// 默认





====================
token
====================
symbol和min-unit 不允许以peg,swap,ibc开头

发行资产：
iris tx token issue --name=token-name --min-unit="ua01" --scale=6 --initial-supply=10000 --max-supply=30000 --mintable=true --from=v0 --chain-id=qa-test --fees=4iris -b block -y  --symbol=a01

iris tx bank send v0 $(iris keys show v0 -a) 1ua01 --fees=4iris --chain-id=qa-test -b block -y |jq

查询资产：
iris query token tokens -o=json $(iris keys show v0 -a) |jq
iris query token token -o=json a01 |jq
iris query token tokens -o=json  |jq


修改资产：
iris tx token edit a01 --name="Cat" --max-supply=99999 --mintable=true --from=v0 --chain-id=qa-test --fees=4iris -b block -y |jq
iris query token token -o=json a01 |jq

增发资产：()
iris tx token mint a01 --amount=1 --to=iaa1pm432kqz62mutq439ynqs87u30r36062qdw977 --from=v0 --chain-id=qa-test --fees=4iris -b block -y
iris query bank balances -o=json iaa1pm432kqz62mutq439ynqs87u30r36062qdw977 |jq

//不指定to，则默认mint给自己
iris tx token mint a01 --amount=1 --from=v0 --chain-id=qa-test --fees=4iris -b block -y


转让asset：
iris tx token transfer a01 --to=iaa1pm432kqz62mutq439ynqs87u30r36062qdw977 --from=v0 --chain-id=qa-test --fees=4iris -b block -y
iris query token tokens -o=json iaa1pm432kqz62mutq439ynqs87u30r36062qdw977 |jq


查询fee：
iris query token fee -o=json a01 |jq

====================
NFT
====================
issue：
iris tx nft issue d01 --from=v0 --chain-id=qa-test --fees=4iris -b block -y
// --schema=<schema-content or path/to/schema.json> 和service的schema一样
// --schema=/Users/sherlock/my_workspace/service/schemas.json

mint:
iris tx nft mint d01 a01 --recipient=$(iris keys show v0 --address) --name="name" --uri="tokenURI" --data="tokenData" --from=v0 --chain-id=qa-test --fees=4iris -b block -y

查询：
iris query nft supply d01 --owner=$(iris keys show v0 --address)
iris query nft supply -o=json d01 |jq
iris query nft owner -o=json $(iris keys show v0 --address) |jq
iris query nft owner -o=json $(iris keys show v0 --address) --denom-id=d01 |jq
iris query nft collection -o=json d01 |jq
iris query nft denom -o=json d01 |jq
iris query nft denoms -o=json |jq
iris query nft token -o=json d01 a01 |jq


edit（必须要用owner）：
iris tx nft edit d01 a01 --name="name2" --uri="tokenURI2" --from=v0 --chain-id=qa-test --fees=4iris -b block -y

transfer：
iris tx nft transfer iaa1pkhw2svp2m7fd3mstpylfk48rrlal8sdmv3kqc d01 a01 --from=v0 --chain-id=qa-test --fees=4iris -b block -y

burn：
iris tx nft mint d01 a02 --recipient=$(iris keys show v0 --address) --uri="tokenURI" --data="tokenData" --from=v0 --chain-id=qa-test --fees=4iris -b block -y

iris tx nft burn d01 a02 --from=v0 --chain-id=qa-test --fees=4iris -b block -y


======================
     htlc
======================
//注意：因为本链 所以other-chain这个暂时00
//secret不填的话自动生成
//time-lock=50 最小为50 只能通过改代码实现，所以自动化测试暂时测不了refund

iris tx htlc create --to=iaa1pm432kqz62mutq439ynqs87u30r36062qdw977  --amount=1iris --time-lock=50 --timestamp=1580000000 --receiver-on-other-chain=00 --from=v0 --chain-id=qa-test --fees=4iris -b block -y

//也可以填
iris tx htlc create --to=iaa1pm432kqz62mutq439ynqs87u30r36062qdw977  --amount=1iris --time-lock=50 --timestamp=1580000000 --receiver-on-other-chain=00 --secret=b5e03cf9be4b77ca253d941467fe1664688403c666fc92317415b9513ad7340e --from=v0 --chain-id=qa-test --fees=4iris -b block -y

返回:
Secret:      76bf1647b790a4ea4a57a25fddf67a3f72bc30e29aeea9d9cf4e67755ce9482d
HashLock:    20e3c53351570b5703b5b147efd3371ef3ad125dc627bf8ec7672cd7bc1c09fa

查询  query-htlc 【HashLock】
iris query htlc htlc 3F0D93550229F9F1C97C04A0F3A63751C8AE707190729519CE65FE0B76716B7A -o=json |jq

声明所有 claim 【HashLock ， secret】
iris tx htlc claim 20e3c53351570b5703b5b147efd3371ef3ad125dc627bf8ec7672cd7bc1c09fa 76bf1647b790a4ea4a57a25fddf67a3f72bc30e29aeea9d9cf4e67755ce9482d  --from=v0 --chain-id=qa-test --fees=4iris -b block -y |jq

取回过期  htlc refund
iris tx htlc refund 3F0D93550229F9F1C97C04A0F3A63751C8AE707190729519CE65FE0B76716B7A --from=v0 --chain-id=qa-test --fees=4iris -b block -y



======================
     guardian
======================

注意：目前只有oracle create 需要super权限

===
iris tx guardian -h
===
修改genesis 复制里面v0， iaa地址 【目前这个不用做了， 保存以备后续】
subl /Users/sherlock/.iris/config/genesis.json

sed -i '' 's/"supers": \[\]/"supers": \[{"description":"test","account_type":0,"address":"iaa1cdq70u5cpczvyt2py80savz7gasgdzx9hc0xw0","added_by":"iaa1cdq70u5cpczvyt2py80savz7gasgdzx9hc0xw0"}\]/g' /Users/sherlock/.iris/config/genesis.json


1.获取所有super账号列表
iris query guardian supers -o=json |jq


2.添加super账号 [注意 :只有genesis账号才可以拥有添加删除用户功能 ]
iris tx guardian add-super --address=$(iris keys show v1 -a) --description=v0 --from=v0 --chain-id=qa-test --fees=4iris -b block -y

3.删除superr账号
iris tx guardian delete-super --address=$(iris keys show v1 -a) --from=v0 --chain-id=qa-test --fees=4iris -b block -y



======================================================================================================
======================================================================================================
======================================================================================================
======================================================================================================
======================================================================================================
======================================================================================================
     service
======================================================================================================
======================================================================================================
======================================================================================================
======================================================================================================
======================================================================================================
======================================================================================================



===================
    定义
===================
1. 服务定义
iris tx service define --chain-id=qa-test --from=v0 --description=service-description --author-description=author-description --tags=tag1,tag2 --schemas=/Users/sherlock/my_workspace/service/schemas.json --name=a001 --fees=4iris -b block -y

2. 服务定义查询 （可以查询 method id）
iris query service definition -o=json a001 |jq

3. 查询 schema
iris query service schema pricing -o=json |jq
iris query service schema result -o=json |jq

===================
    绑定
===================
1. 服务绑定
//owner是v0， provider也是v0
iris tx service bind --chain-id=qa-test --fees=4iris -b block -y --from=v0 --deposit=20000iris --pricing=/Users/sherlock/my_workspace/service/pricing_1.0.json --service-name=a001 --qos=5 --options={}

//owner是v0， provider也是v1
iris tx service bind --chain-id=qa-test --fees=4iris --provider=$(iris keys show v1 --address) -b block -y --from=v0 --deposit=20000iris --pricing=/Users/sherlock/my_workspace/service/pricing_1.0.json --service-name=a001 --qos=5

2. 查询服务绑定
iris query service binding  -o=json a001 $(iris keys show v0 --address) |jq
iris query service bindings -o=json a001 |jq

//过滤a001服务下 ， owner是v0的所有provider绑定信息
iris query service bindings -o=json a001 --owner=$(iris keys show v0 --address) |jq

3. 更新绑定 --min-resp-time（qos）也可以改
iris tx service update-binding a001 $(iris keys show v0 --address) --chain-id=qa-test --from=v0 --fees=4iris -b block -y --deposit=2iris --qos=6 --options={}

4. 设置提取地址 （所有的provider只能通过owner的地址提取）
iris tx service set-withdraw-addr --chain-id=qa-test --from=v0 --fees=4iris -b block -y iaa1pm432kqz62mutq439ynqs87u30r36062qdw977

//查询提取地址
iris query service withdraw-addr $(iris keys show v0 --address)

7.服务失效 （disable的情况下可以被call， 返回code0， 但是不会起作用）
iris tx service disable a001 $(iris keys show v0 --address) --chain-id=qa-test --from=v0 --fees=4iris -b block -y

8.服务恢复 ，可以增加抵押
iris tx service enable a001 $(iris keys show v0 --address) --chain-id=qa-test --from=v0 --fees=4iris -b block -y --deposit=1iris

9. 取回抵押 (滞后 COMPLAINT_RETROSPECT (Gov) + ARBITRATION_TIMELIMIT (Gov)) 、、这个还没有测
iris tx service refund-deposit a001 --chain-id=qa-test --from=v0 --fees=4iris -b block -y
//iris tx service refund-deposit <service-name> <provider-address>

===================
    调用
===================
1. 服务调用
1）批量请求
//单个
iris tx service call --chain-id=qa-test --from=v0 --fees=4iris -b block -y --service-name=a001  --timeout=20 --service-fee-cap=100iris --data=/Users/sherlock/my_workspace/service/data.json --providers=$(iris keys show v0 --address) |jq

//重复
iris tx service call --chain-id=qa-test --from=v0 --fees=4iris -b block -y --service-name=a001 --service-fee-cap=100iris --data=/Users/sherlock/my_workspace/service/data.json --providers=$(iris keys show v0 -a) --timeout=20 --repeated --frequency=20 --total=-1 |jq

查询请求列表
//如果查不到 可能是price低了，可能是min-resp-time没满足bind
iris query service requests -o=json a001 $(iris keys show v0 -a) |jq

===
记录
===
id：
D7C0EF6E19D29FAA83C603EABCBCA9BE378C5CF05F7CBCE1EA37971FAF808C540000000000000000000000000000000100000000000001D70000

request_context_id:
D7C0EF6E19D29FAA83C603EABCBCA9BE378C5CF05F7CBCE1EA37971FAF808C540000000000000000

-----

根据上一条返回的id （过期也可以查到）
iris query service request -o=json D7C0EF6E19D29FAA83C603EABCBCA9BE378C5CF05F7CBCE1EA37971FAF808C540000000000000000000000000000000100000000000001D70000 |jq

//用<request-context-id>超时后可以查到，当前running也可以查到，看一下批次号
iris query service request-context -o=json D7C0EF6E19D29FAA83C603EABCBCA9BE378C5CF05F7CBCE1EA37971FAF808C540000000000000000 |jq

//requests只能查询到当前活跃的
iris query service requests -o=json D7C0EF6E19D29FAA83C603EABCBCA9BE378C5CF05F7CBCE1EA37971FAF808C540000000000000000 4 |jq



2.相应请求
iris tx service respond --chain-id=qa-test --from=v0  --fees=4iris -b block -y  --data='{"header":{},"body":{"data": "100"}}' --result='{"code":200,"message":"ok"}' --request-id=$(iris query service requests a001 $(iris keys show v0 --address) -o=json | jq -r .requests[0].id) |jq



3.查询相应请求 ，用"2）"返回request id 【必须在批次内查询， 结束后就查不到了】
iris query service response D726D43041FBC45FB8A9178405C4E0DD8FAD7FDDCC36B740BCC17A65530E19DC0000000000000000000000000000000100000000000001F30000

     ===========================
       取回服务调用产生的服务费（卖家），未响应超时的服务费会自动退还给（买家）
     ===========================
1.查询服务费（默认税费是10%）
iris query service fees -o=json $(iris keys show v0 --address) |jq


2.提取服务调用产生的服务费
iris tx service withdraw-fees --chain-id=qa-test --from=v0 --fees=4iris -b block -y

// iris query bank balances -o=json iaa1pm432kqz62mutq439ynqs87u30r36062qdw977 |jq

3.注意没有 withdraw-tax

     ===========================
      请求上下文相关 ====》》》  测下 nftlcd 的bug 下载一个新的
     ===========================
CONTEXTID=D726D43041FBC45FB8A9178405C4E0DD8FAD7FDDCC36B740BCC17A65530E19DC0000000000000000
echo $CONTEXTID

1. 查询请求上下文 <request-context-id>， 返回这个call的很多字段信息
iris query service request-context -o=json $CONTEXTID |jq
//查询request id
iris query service requests a001 -o=json $(iris keys show v0 --address) |jq

2. 暂停请求上下文
iris tx service pause --chain-id=qa-test --from=v0  --fees=4iris -b block -y $CONTEXTID

3. 启动请求上下文
//state变成running , BatchState在complete状态也会变running
iris tx service start --chain-id=qa-test --from=v0 --fees=4iris -b block -y $CONTEXTID

4. 更新请求上下文
iris tx service update --chain-id=qa-test --from=v0 --fees=4iris -b block -y  --frequency=20 --total=3000 $CONTEXTID

5. 终止请求上下文
// state变成complete
// 非repeated 不能kill
iris tx service kill --chain-id=qa-test --from=v0 --fees=4iris -b block -y  $CONTEXTID

6. 查询请求上下文的请求列表 （注意价格不到的请求是会被过滤掉）
//列表只有有效的才会被查出， 但是iris service request-context 永远能查出）
iris query service request-context -o=json $CONTEXTID |jq

7. 查询请求上下文的响应列表（后面是request id）
//注意这个只能查活跃的 ， 过期的查不到。
iris query service response -o=json D726D43041FBC45FB8A9178405C4E0DD8FAD7FDDCC36B740BCC17A65530E19DC0000000000000000000000000000002A00000000000005270000 | jq
iris query service responses <request-context-id> <batch-counter>


================================================================================
================================================================================
oracle
================================================================================
================================================================================

===
注意
===
目前需要profiler, 起来的时候需要有profiler

===
定义, 绑定
===
iris tx service define --chain-id=qa-test --from=v0 --description=service-description --author-description=author-description --tags=tag1,tag2 --schemas=/Users/sherlock/my_workspace/service/schemas.json --name=a001 --fees=4iris -b block -y

iris tx service bind --chain-id=qa-test --fees=4iris -b block -y  --from=v0 --deposit=20000iris --pricing=/Users/sherlock/my_workspace/service/pricing_1.0.json --service-name=a001 --qos=5 --options={}

===
开始
===

1. Create Feed
//创建feed的同时相当于创建了一个service call
//threshold 不能大约provider的个数
//State初始=pause
//--value-json-path="data.user.name" 最新的是 --value-json-path=data
//不定义create会报错， 不绑定不会报错， 但是后续request会收不到。这里要注意。
iris tx oracle create --chain-id=qa-test --from=v0 --fees=4iris --description=description --latest-history=10 --service-name=a001 --input=/Users/sherlock/my_workspace/service/input.json --providers=$(iris keys show v0 --address) --service-fee-cap=100iris --timeout=20 --frequency=20 --threshold=1 --aggregate-func="avg" --value-json-path="data" --feed-name=f001 -b block -y  | jq

2. Query Feed
iris query oracle feed -o=json f001 | jq

3. Start Feed
//State=running
iris tx oracle start f001 --chain-id=qa-test --from=v0 --fees=4iris -b block -y  | jq

4. Pause Feed
//State=pause
iris tx oracle pause f001 --chain-id=qa-test --from=v0 --fees=4iris -b block -y  | jq

5. Update Feed
iris tx oracle edit f001 --chain-id=qa-test --from=v0 --fees=4iris --latest-history=2 -b block -y  | jq
// --providers=faa1r3tyupskwlh07dmhjw70frxzaaaufta37y25yr --service-fee-cap=1iris --timeout=5 --frequency=5 --threshold=1 --description  --latest-history --service-fee-cap --timeout --frequency --total --threshold

6. Query Feeds
iris query oracle feeds --state=running -o=json  | jq
iris query oracle feeds --state=paused -o=json | jq

//直接搜出所有的
iris query oracle feeds -o=json | jq

7. Query Value
iris query oracle value f001 -o=json | jq

    **************
    单人响应
    **************
iris tx service respond --chain-id=qa-test --from=v0 --fees=4iris --request-id=$(iris query service requests a001 $(iris keys show v0 --address) -o=json | jq -r .requests[0].id) --data='{"header":{},"body":{"data": "12345"}}' --result='{"code":200,"message":"ok"}' -b block -y  | jq

//如果查不到 可能是create的时候--value-json-path不对。
iris query oracle value f001 -o=json | jq



    **************
    多人响应
    **************
    //同一个call， RequestContextID是的同一个。 但是针对于不同的provider的RequestID都是不一样的， 而且同一个provider每轮的RequestID也是不一样的

//先要创建v1 recover，转账
iris keys add v1 --recover
figure seminar caught foster midnight cup method west brown hundred regular symptom family accuse tourist game burst audit tell foot acquire spike chair danger
// iaa1pm432kqz62mutq439ynqs87u30r36062qdw977

iris tx bank send v0  $(iris keys show v1 -a) 100000iris --fees=4iris --chain-id=qa-test -b block -y
iris query bank balances $(iris keys show v1 -a)


//增加一个provider v1
iris tx oracle edit f001 --chain-id=qa-test --from=v0 --fees=4iris --providers=$(iris keys show v0 --address),$(iris keys show v1 --address) -b block -y  | jq

//v1也要绑定， 不绑定就不能respond
iris tx service bind --chain-id=qa-test --fees=4iris -b block -y  --from=v1 --deposit=10000iris --pricing=/Users/sherlock/my_workspace/service/pricing_1.0.json --service-name=a001 --qos=5 --options={}

//等一会儿，到下一轮，两个都可以查到了，此条不用执行
iris query service requests -o=json a001 $(iris keys show v0 --address) |jq
iris query service requests -o=json a001 $(iris keys show v1 --address) |jq

//v0 ， v1 ：分别response 1次，共2次
iris tx service respond --chain-id=qa-test --from=v0 --fees=4iris --request-id=$(iris query service requests a001 $(iris keys show v0 --address) -o=json | jq -r .requests[0].id) --data='{"header":{},"body":{"data": "100"}}' --result='{"code":200,"message":"ok"}' -b block -y  | jq

iris tx service respond --chain-id=qa-test --from=v1 --fees=4iris --request-id=$(iris query service requests a001 $(iris keys show v1 --address) -o=json | jq -r .requests[0].id) --data='{"header":{},"body":{"data": "200"}}' --result='{"code":200,"message":"ok"}' -b block -y  | jq

//查询结果，等到一轮timeout以后出结果， 如果出现150就说明成功了，取了2个的均值。
iris query oracle value f001 -o=json | jq


======================
    random
======================

===
不使用oracle
===
//记录request_id
//block-interval默认为10
iris tx random request --chain-id=qa-test --from=v0 --fees=4iris -b block -y --block-interval=5 | jq

//5块内立即可以查询
iris query random queue

//5块后立即可以查询 (5块内查不到)
iris query random random -o=json 265fc9eaef89de424577d18e28a293a694405f692233769b9e5b5ea5845d16a7 | jq


===
使用service中的oracle
 --oracle=true  ，注意： 这个oracle是只请求一次的！
===
1.定义 自带一个service：random
iris query service definition random

//自己定义： 目前已经子弹带了 所以这步不要自己做了 【注意一定要用random这个名字】
//iris tx service define --chain-id=qa-test --from=v0 --description=service-description --author-description=author-description --tags=tag1,tag2 --schemas=/Users/sherlock/my_workspace/service/schemas_random.json --name=random --fees=4iris -b block -y

2.绑定
iris tx service bind --chain-id=qa-test --fees=4iris -b block -y --from=v0 --deposit=20000iris --pricing=/Users/sherlock/my_workspace/service/pricing_1.0.json --service-name=random --qos=5 --options={}

//查询
iris query service bindings -o=json random | jq

3.request
//block-interval默认为10 【注意 默认使用 random名字的服务】【这里记录request_id， 最后5）rand rand用】
//注意 有2个request id， 一个是rand的request id， 一个是service的request id
iris tx random request --chain-id=qa-test --from=v0 --fees=4iris -b block -y --block-interval=10 --oracle=true --service-fee-cap=2iris | jq

request id【rand】 ：d66c431541cde8d46bb55b96b506de755c5005b20322254cac9b5073d042e617
generate_height   ：61


// 在(0,block-interval)之内可以通过 rand模块的rand-height查到该次请求， 0是指提交请求的那一刻
    iris query random queue -o=json 61 | jq
    iris query random queue -o=json | jq

// 在(block-interval, block-interval+timeout[service默认超时时间100块])只能可以通过 service模块的request-id查到该次请求
// 现在request的第一条查询已经可以现实 request-id （这个没有做好）
// 注意， rand的request是单次的， repeated=false
// 注意，如果这里查不到，很可能random request的时候service-fee-cap小了，注意注意！
    iris query service requests random -o=json $(iris keys show v0 -a)| jq


4.respond 这里会返回request-id 【过了20个块，就已经发出request了， 这个时候就可以respond了】这里用的service的request id
iris tx service respond --chain-id=qa-test --from=v0 --fees=4iris --request-id=$(iris query service requests random $(iris keys show v0 -a) -o=json | jq -r .requests[0].id) --data='{"header":{},"body":{"seed":"3132333435363738393031323334353637383930313233343536373839303132"}}' --result='{"code":200,"message":"ok"}' -b block -y | jq

5.查询结果， request id【rand】， 注意不是4中的service的request-id 。
iris query random random -o=json d66c431541cde8d46bb55b96b506de755c5005b20322254cac9b5073d042e617 | jq



================================================================================
================================================================================
非iris的price 测试汇率换算。
================================================================================
================================================================================


=================
初始化token ：注意scale很重要，不然后面应为比例不对查不到。--min-unit=uatom 不是 atom。
=================
iris tx token issue --name=atom --min-unit="uatom" --scale=6 --initial-supply=10000 --max-supply=30000 --mintable=true --from=v0 --chain-id=qa-test --fees=4iris -b block -y --symbol=atom


=================
定义oracle服务 （这个oracle是不停向provider v0发出"汇率"查询请求。）
注意 是最小单位的汇率。不是主单位
=================
iris tx service define --name=oracle --description="this is a oracle service"  --author-description="oracle service provider"  --schemas='{"input":{"type":"object"},"output":{"type":"object"}}' --fees=4iris --chain-id=qa-test --from=v0 -b block -y
iris tx service bind --service-name=oracle --deposit=20000iris --pricing='{"price":"0uiris"}' --qos=1 --options="{}"  --chain-id=qa-test --from=v0 --fees=4iris -b block -y

iris tx oracle create --feed-name="uatom-uiris" --description="test feed" --latest-history=10  --service-name="oracle" --input='{"header":{},"body":{"pair":"uatom-uiris"}}' --providers=$(iris keys show v0 --address) --service-fee-cap=1iris --timeout=30 --frequency=31 --threshold=1 --aggregate-func="avg" --value-json-path="last" --chain-id=qa-test --from=v0 --fees=4iris -b block -y

iris tx oracle start uatom-uiris --chain-id=qa-test --from=v0 --fees=4iris -b block -y

//iris q oracle feed uatom-uiris --chain-id=qa-test


=================
v0 response 汇率， 查询request 并且respond
//五分钟必须respond一次 不然后面用到查的都会过期。
=================
iris q service requests oracle $(iris keys show v0 --address) --chain-id=qa-test

//一个atom = 0.2个iris
iris tx service respond --request-id=C024F1460AAE03472DC905EBBBA3557536D00E9109575CB0ED6C10CA74FB2A930000000000000000000000000000005F0000000000000B6A0000 --result='{"code":200,"message":""}' --data='{"header":{},"body":{"last":"0.2"}}'  --chain-id=qa-test --from=v0 -b block -y

//系统服务会来查这个值（ uatom-uiris ），确定汇率， 5分钟内有效
//iris q oracle value uatom-uiris --chain-id=qa-test


=================
 oracle-price 这个是系统定义的服务，测试这个系统服务是否正常抓取汇率，可以不执行。
=================

//iris q service definition oracle-price
//iris q service bindings oracle-price

iris tx service call --service-name=oracle-price --providers=$(iris keys show v0 --address) --service-fee-cap=1iris --data='{"header":{},"body":{"pair":"uatom-uiris"}}' --timeout=100 --repeated --frequency=150 --total=100  --chain-id=qa-test --from=v0 -b block -y

//用上面返回的request id查询respose， 可以查到最新(5分钟的汇率)
iris q service response DA561E84C7716DB921C50DF88060E694DE15010CCC308D6B07E21793AC5776E50000000000000000000000000000000100000000000000140000


=================
例子： 这个就是用iris付款 直接转换atom的汇率
=================

iris tx service define --name=test --description="this is a test service" --author-description="test service provider" --schemas='{"input":{"type":"object"},"output":{"type":"object"}}' --chain-id=qa-test --from=v0 -b block -y
iris tx service bind --service-name=test --deposit=20000iris --pricing='{"price":"100uatom"}' --qos=100 --options="{}" --chain-id=qa-test --from=v0 -b block -y


iris tx bank send v0 $(iris keys show v1 -a) 100atom --fees=4iris --chain-id=qa-test -b block -y |jq
iris tx bank send v0 $(iris keys show v1 -a) 100iris --fees=4iris --chain-id=qa-test -b block -y |jq
iris query bank balances $(iris keys show v1 -a)

// v1消费， 注意call之前一定要respond上面的汇率服务， 5分钟不respose默认价格汇率差不多 后续的request就查不到了）
// 根据汇率price的 100uatom = 20uiris
// 汇率换算紧紧在这个参数（service-fee-cap）上有作用，做检查。如果这个fee_cap（最大可接受的费用）小于20uiris， call的命令将会报错

-------- 19uiris --------
iris tx service call --service-name=test --providers=$(iris keys show v0 --address) --service-fee-cap=19uiris --data='{"header":{},"body":{}}' --timeout=100  --chain-id=qa-test --from=v1 -b block -y
//此时查询不到是对的， 最大可接受价格因为小于price
iris q service requests test $(iris keys show v0 --address) --chain-id=qa-test
-------------------------

-------- 20uiris --------
iris tx service call --service-name=test --providers=$(iris keys show v0 --address) --service-fee-cap=20uiris --data='{"header":{},"body":{}}' --timeout=100  --chain-id=qa-test --from=v1 -b block -y
//能查询到
iris q service requests test $(iris keys show v0 --address) --chain-id=qa-test
-------------------------

//v0 response
iris tx service respond --request-id=F090332D1756509B0EEC8FDA10A6DE1941704E2F56747198653A94E586243D850000000000000000000000000000000100000000000001890000  --result='{"code":200,"message":""}' --data='{"header":{},"body":{"test":""}}' --chain-id=qa-test --from=v0 -b block -y

iris q service response F090332D1756509B0EEC8FDA10A6DE1941704E2F56747198653A94E586243D850000000000000000000000000000000100000000000001890000


=================
检查
=================
//v1少了100个uatom
iris query bank balances -o=json $(iris keys show v1 -a) |jq

//fee应该多90个uatom 这里有问题 （10%是税）
iris query service fees -o=json $(iris keys show v0 --address) |jq



=================
测试bind的时候deposit 是否完成换算后拦截
=================
iris tx service define --name=test2 --description="this is a test service" --author-description="test service provider" --schemas='{"input":{"type":"object"},"output":{"type":"object"}}' --chain-id=qa-test --from=v0 -b block -y

500uatom = 100uiris ，  *200（现在这个参数是200倍） = 20000uiris， 下面代码会拦截。
iris tx service bind --service-name=test6 --deposit=19999uiris --pricing='{"price":"500uatom"}' --qos=100 --options="{}" --chain-id=qa-test --from=v0 -b block -y




======================================================================================================
======================================================================================================
======================================================================================================
     系统mint验证
======================================================================================================
======================================================================================================
======================================================================================================

//只有一个验证人的情况, 所有奖励除了少部分税 都给这个验证人
//每块增加大约12.4^8， 会有小数
iris query distribution validator-outstanding-rewards $(iris keys show v0 --bech val -a) --chain-id=qa-test

// total
//每块增加大约16.4^8
iris query bank total


====================
staking （用的cosmos 有些问题， 暂时先不测）
====================
iris query staking validators -o=json |jq
iris query staking validator iva1cdq70u5cpczvyt2py80savz7gasgdzx9zf9fng -o=json |jq

iris tx staking delegate iva1cdq70u5cpczvyt2py80savz7gasgdzx9zf9fng 1iris --from=v0 --chain-id=qa-test --fees=4iris -b block -y
iris query staking delegation iaa1cdq70u5cpczvyt2py80savz7gasgdzx9hc0xw0 iva1cdq70u5cpczvyt2py80savz7gasgdzx9zf9fng --chain-id=qa-test
iris query staking delegations faa1capy9vr3ratgcqt6k442ga9kevuz05c8x8m3z2 --chain-id=qa-test
iris tx staking unbond iva1cdq70u5cpczvyt2py80savz7gasgdzx9zf9fng 50uiris --from=v0 --chain-id=qa-test --fees=4iris -b block -y
iris query staking unbonding-delegation iaa1cdq70u5cpczvyt2py80savz7gasgdzx9hc0xw0 iva1cdq70u5cpczvyt2py80savz7gasgdzx9zf9fng --chain-id=qa-test
iris tx distribution set-withdraw-addr iaa1cdq70u5cpczvyt2py80savz7gasgdzx9hc0xw0 --from=v0 --chain-id=qa-test --fees=4iris -b block -y
iris tx distribution withdraw-all-rewards --from v0 --chain-id=qa-test --fees=4iris -b block -y
iris query account iaa1cdq70u5cpczvyt2py80savz7gasgdzx9hc0xw0 --chain-id=qa-test



====================
gov （暂时先不测）
====================
iris tx gov submit-proposal --title="Test Proposal" --description="My awesome proposal" --type="Text" --deposit="10iris" --from=v0 --chain-id=qa-test --fees=4iris -b block -y
iris query gov proposal 1 --chain-id=qa-test
iris tx gov deposit 1 10000000iris --from=v0 --chain-id=qa-test --fees=4iris -b block -y
iris query gov param deposit --chain-id=qa-test
iris tx gov vote 1 yes  --from=v0 --chain-id=qa-test --fees=4iris -b block -y
iris query gov proposal 1 --chain-id=qa-test -o=json --indent //里面有字段可以看结果

iris query gov proposals
====================
创建验证人
====================
iris init v1 --home=/Users/sherlock/.iris/v1 --chain-id=qa-test
cp /Users/sherlock/.iris/config/config.toml /Users/sherlock/.iris/v1/config/config.toml
cp /Users/sherlock/.iris/config/genesis.json /Users/sherlock/.iris/v1/config/genesis.json

 //node id 下面用
iris tendermint show-node-id --home=/Users/sherlock/.iris
sed -i '' 's/2665/2666/g' /Users/sherlock/.iris/v1/config/config.toml
sed -i '' 's/seeds = ""/seeds = "e73cb4c65ad0409fad09c727262f419188403fe5@localhost:26656"/g' /Users/sherlock/.iris/v1/config/config.toml
sed -i '' 's/9090/9091/g' /Users/sherlock/.iris/v1/config/app.toml
iris start --home=/Users/sherlock/.iris/v1 （此时正常追赶）

iris keys show v1 //iaa1ev9twzjp5td8k43rf6pw2g74qpf6hl473veuyw
iris tx bank send v0 $(iris keys show v1 -a) 10000iris --fees=4iris --chain-id=qa-test -b block -y |jq
iris query bank balances -o=json $(iris keys show v1 -a) |jq
iris tendermint show-validator --home=/Users/sherlock/.iris/v1
//icp1zcjduepqdn72nvnmfl6s0w0qt0yak8ngl9qcmtk47w09qlx22rmmw4zhy37qtg0mge

iris tx staking create-validator --pubkey=icp1zcjduepq4j9n5skesmyr59fhv4uhlssvq4hpsh0yg2payt8pnyasc8lac3cs93axan --moniker=v1 --amount=19iris --min-self-delegation=1 --from=v1 --chain-id=qa-test --fees=4iris -b block -y --commission-max-change-rate=0.1 --commission-max-rate=0.1 --commission-rate=0.1
iris query staking validators --chain-id=qa-test -o=json | jq

//iris query slashing signing-info --chain-id=qa-test fcp1zcjduepqpzudzh5k84h5zpnsp9l96pql7n0yaqd9pfcvcw603ngyvrcz6fdqf09vng
//iris query slashing signing-infos --chain-id=qa-test fcp1zcjduepqpzudzh5k84h5zpnsp9l96pql7n0yaqd9pfcvcw603ngyvrcz6fdqf09vng (这个是查所有unjail和unjail的记录)
//iris tx slashing unjail --from=v1 --chain-id=qa-test --fees=0.4iris -b block -y  （注意这里unjail不要提供validator id）
======================================================================================================
    Distribution
======================================================================================================

iris query distribution rewards $(iris keys show v0 -a)

     ===========================
                准备
     ===========================
iris tx bank send v0 $(iris keys show v1 -a) 1iris --fees=4iris --chain-id=qa-test -b block -y
iris query bank balances $(iris keys show v1 -a) |jq

iris tx distribution set-withdraw-addr $(iris keys show v1 -a)  --from=v0 --chain-id=qa-test --fees=4iris -b block -y
iris tx bank send v0 $(iris keys show v0 -a) 1iris --fees=100000iris --chain-id=qa-test -b block -y


iris query distribution validator-outstanding-rewards $(iris keys show v0 --bech val -a) --chain-id=qa-test
iris tx distribution withdraw-rewards $(iris keys show v0 --bech val -a)  --from=v0 --chain-id=qa-test --fees=4iris -b block -y
iris query bank balances $(iris keys show v1 -a) |jq



======================================================================================================
======================================================================================================
======================================================================================================
======================================================================================================
======================================================================================================

irishub v1.0 ，重构后的代码初步测试有以下问题需修复：

https://gitlab.bianjie.ai/vincent/document/blob/patch-1/projects/issues.md


cosmos自带的一些bug，记录待修复：

rest 和 swagger 暂时用不了


iris query staking validator 的help中的cosmos地址
iris query staking validator -h
Example:
$ iris query staking validator cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj


iris tx distribution withdraw-rewards 无法提取收益

Distribution 没有查询 withdraw-addr 地址的接口

iris query staking validator iva*** 有问题 ，无法查询



==================
离线交易
    注意:离线签名不能转单位，所以都要用uiris
==================
注意：因为不校验，所以只能用uiris， 不能用iris

iris tx bank send $(iris keys show v0 --address) $(iris keys show v0 --address) 1uiris --chain-id=qa-test --fees=4uiris  -b block -y --generate-only >~/my_workspace/Tx-generate

//注意 不加home会崩溃
iris tx sign /Users/sherlock/my_workspace/Tx-generate   --from=v0 --chain-id=qa-test --home=/Users/sherlock/testnet/v0/iris >~/my_workspace/Tx-sign
iris tx broadcast ~/my_workspace/Tx-sign -b block -y


老版本离线签名 不需要起链
iriscli tx sign ~/my_workspace/Tx-generate --name=t1 --chain-id=qa-test --offline --sequence=1 --account-number=8  >~/my_workspace/Tx-sign1
iriscli tx sign ~/my_workspace/Tx-sign1 --name=t2 --chain-id=qa-test --offline --sequence=1 --account-number=9 --append  >~/my_workspace/Tx-sign2

注意新的rest broadcast需要剪切 {"msg":}


*******************************
    多签账户 multisig
    注意:离线签名不能转单位，所以都要用uiris
*******************************
1）创建普通账户（有的话就不需要了）
iris keys list
iris keys add v0 --recover
iris keys add v1 --recover

2）创建多签账户， 给这个多签账户转一笔初始token（10iris）
iris keys add x1 --multisig-threshold=2 --multisig=v0,v1
iris tx bank send $(iris keys show v0 --address) $(iris keys show x1 --address) 9uiris --fees=4uiris --chain-id=qa-test --from=v0 -b block -y

3）多签账户构造【转账】交易
iris tx bank send $(iris keys show x1 --address) $(iris keys show v0 --address) 1uiris --chain-id=qa-test --fees=1uiris -b block -y --generate-only >~/my_workspace/Tx-generate

iris query bank balances $(iris keys show x1 -a)

4）用v0，v1对Tx-generate进行签名
iris tx sign /Users/sherlock/my_workspace/Tx-generate --from=v0 --chain-id=qa-test --multisig=$(iris keys show x1 --address)  --signature-only >~/my_workspace/Tx-sign-v0

iris tx sign /Users/sherlock/my_workspace/Tx-generate --from=v1 --chain-id=qa-test --multisig=$(iris keys show x1 --address)  --signature-only >~/my_workspace/Tx-sign-v1

5）合并2个签名,并生成Tx-signed
iris tx multisign --chain-id=qa-test /Users/sherlock/my_workspace/Tx-generate x1 /Users/sherlock/my_workspace/Tx-sign-v0 /Users/sherlock/my_workspace/Tx-sign-v1 > ~/my_workspace/Tx-signed

6）广播签名
iris tx broadcast /Users/sherlock/my_workspace/Tx-signed -b block -y
iris query bank balances $(iris keys show x1 -a)

========
ledger ，nano
========

Ledger 输入pin 00000000，进入cosmos app
iris keys add b --ledger  // faa14qy8a6eed5xqjudzgnmutth6ck4f6yz3cnka6k
iris keys show b

iris tx bank send v0 $(iris keys show b -a) 100iris --fees=4iris --chain-id=qa-test -b block -y
iris query bank balances -o=json $(iris keys show b -a) |jq

iris tx bank send b iaa16utfzmx48pe5rvc7zq0mnmk4a96v7yg2tyrutd 90iris --fees=4iris --chain-id=qa-test -b block -y



=======================================================
keys export import
=======================================================
iris keys export a1   (注意没有output-file 也不能用 >/Users/sherlock/key_a1 ，只能复制返回到/Users/sherlock/key_a1 ，要输入解码密码)
iris keys import a1 /Users/sherlock/key_a1 （输入解码密码。 注意原来必须删除，不然报错）

iris keys delete a1
// v16.3的导出功能
iriscli16 keys export a1 --output-file=/Users/sherlock/key_a


==============================
params update 参数修改
==============================
iris query service params

iris 参数修改不是通过 tx params update （cschain是这样的）
iris tx params update /Users/sherlock/my_workspace/service/param.json --from=v0 --chain-id=qa-test --fees=4point -b block -y

iris query token params
iris query service params
iris query node params
iris query auth params
iris query slashing params

//iris query params subspace key
iris query params subspace token IssueTokenBaseFee


iris query gov params

----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
------ token spec 具体测试方法记录 ------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
修改：(在iris collect-gentxs之后)

"coins": [
    {
      "denom": "uiris",
      "amount": "200000000000000"
    },
    {
    "denom": "ua01",
    "amount": "10000"
    },
    {
    "denom": "swap/s01",
    "amount": "10000"
    },
    {
    "denom": "ibc/i01",
    "amount": "10000"
    },
    {
    "denom": "peg/p01",
    "amount": "10000"
    }
]



iris query bank balances -o=json $(iris keys show v0 -a) |jq

iris tx bank send v0 $(iris keys show v1 -a) 1iris --fees=4iris --chain-id=qa-test -b block -y |jq
iris tx bank send v0 $(iris keys show v1 -a) 1ua01 --fees=4iris --chain-id=qa-test -b block -y |jq
iris tx bank send v0 $(iris keys show v1 -a) 1swap/s01,1ibc/i01,1peg/p01 --fees=4iris --chain-id=qa-test -b block -y |jq

iris query bank balances -o=json $(iris keys show v1 -a) |jq




*******************************************
          更新 doc： 独立的仓库和测试分开
*******************************************
----------- 直接在主分支上push
git checkout -b shilei/doc—fix upstream/master
git push upstream shilei/doc—fix
更新下载图形界面，切换到shilei/doc—fix分支

图形界面 git commit
git push upstream shilei/doc—fix //第一次会创建分支
//去网上pr

WIP: Add "json indent" usage and fix the "query output format" of all the docs
R4R: Update `doc/swagger version/version.go` to v0.14.1

-------
部署document
-------
安装：
brew install yarn
yarn install   （每次新的功能都要做一遍）

部署：
cd /Users/sherlock/go/src/github.com/irishub/docs
rm -fr node_modules
yarn serve

打开：
http://localhost:8080/

