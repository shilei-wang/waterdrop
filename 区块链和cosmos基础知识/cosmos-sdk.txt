只是碎片记忆 最后整理

*************************************************
test 碎片
*************************************************
ISend 一开始做了
	tests.ExecuteT(t, fmt.Sprintf("gaiad --home=%s unsafe_reset_all", gaiadHome))
	executeWrite(t, fmt.Sprintf("gaiacli keys delete --home=%s foo", gaiacliHome), pass)
	executeWrite(t, fmt.Sprintf("gaiacli keys delete --home=%s bar", gaiacliHome), pass)
	chainID := executeInit(t, fmt.Sprintf("gaiad init -o --name=foo --home=%s --home-client=%s", gaiadHome, gaiacliHome))
	executeWrite(t, fmt.Sprintf("gaiacli keys add --home=%s bar", gaiacliHome), pass)

*************************************************
安装
*************************************************
https://github.com/cosmos/cosmos-sdk
go get github.com/cosmos/cosmos-sdk

https://github.com/irisnet/irishub
go get github.com/irisnet/irishub


*************************************************
IBC （Inter-Blockchain CommunicationProtocol 区块链内部通信协议）
*************************************************
跨链互联-IBC

现在有了Tendermint的帮助，开发人员使用它就可以轻松地开发高性能的区块链，而不必维护网络或共识层。这些区块链都有不同的应用程序层，但是它们共享相同的网络和共识堆栈。正因为如此，实现它们之间的联系变得很容易。

基于Tendermint的区块链之间的连接是通过一个名为IBC（Inter-Blockchain CommunicationProtocol）协议实现的。IBC利用了即时最终确定性的属性，允许异构的区块链间相互交换物品（例如Token）。

IBC是如何工作的，以及如何创造出区块链互联网：Cosmos

1. 不同层：异构区块链可以有不同的分层，这意味着它们在实现网络、共识和应用程序部分时可能存在差异。在实现上有一些限制，主要是必须具有实时最终性。快速最终性得到共识后形成的最新区块就是最终区块，这种最终性不像PoW是基于概率性的。
2. 治理：每个区块链都由一组验证人维护，它们的工作是对下一块区块取得共识然后提交。

IBC允许异构链交换代币。这意味着部署不同应用和验证者们的区块链间具有互操作性。

IBC是如何工作的？

IBC的原理相当简单。举一个例子，在A链上的账户想发送10个token(记作X)给B链上的账户。这些token被锁在链A上，然后证明这10个X是从链A转移到链B的。B链跟踪A链的验证人。如果有三分之二的链A验证人们的签名，它就是有效的，并在B链上创建了10个X。

请注意在B链上创造出的token实际上不是原生X，由于X只存在于A链上。它们实际变成了在B链的token，并且X在A链上都被冻结，无法使用。

当它们返回原始链的时候，使用相同的机制解锁token。

*************************************************
Tendermint
*************************************************

Tendermint可以理解为一个模块化的区块链软件框架，支持开发者个性化定制自己的区块链，而又不需要考虑共识以及网络传输的实现。


上图简单描述了Tenermint的工作流。大致为：

    client（注意此处的client是tendermint自己的client）通过RPC接口broadcast_tx_commit提交交易；

    mempool调用ABCI接口CheckTx用于校验交易的有效性，比如交易序号、发送者余额等，同时订阅交易执行后的事件并等待监听。

    共识从mempool中获取交易开始共识排序，打包区块，确定之后依次调用ABCI相关接口更新当前的世界状态，并触发事件。

    最终将交易信息返回client。

*************************************************
Tendermint   commit
*************************************************
   共识连接只在一个新块被提交时使用，这个块有一系列请求 beginblock delivertx,..., endblock, commit。tendermint以异步有序的方式转发delivertx请求确保app以同样的次序接收。

   [重要！！] commit，当一个块的所有处理都完成了，tendermint会发送commit请求和这个块，然后等到response。commit完成后，应用会返回一个字节数组，这个字节数组是一个类似hash的用于验证区块有效性的东西，放在下一个区块。

   beginblock, 它可以运行每个区块的头部的代码，也可以让tendermint在发送事务之前发送当前区块的hash和头部给应用。建议应用保存最新的height和header，以便加快某些处理。
   endblock, 它运行每个区块的尾部的代码。此外，endblock的response也包含一系列的validator，以便更新validator set，所以如果要增加或者减少validator，只要把它们加在endblock的validator就行了，注意，修改的validator必须要少于三分之一，否则会导致无法形成共识。

*************************************************
irishub db 本质是一个本地私钥管理器 用户名密码只是提供对本地私钥使用的权限
*************************************************


*************************************************
 Cosmos验证人哨兵节点架构说明
*************************************************
为什么需要哨兵节点？

随着Cosmos网络的影响范围不断变大，网络也会经常遭受攻击，比如说DoS。一个有效的哨兵节点架构将保证验证人节点的IP不被暴露出来，同时可以组织其他节点与验证人节点连接。 这样可以混淆验证人节点的真实位置。

也就是说，哨兵节点的架构是可选择的。验证人有责任维护一个抗攻击的全节点。 这是我们根据经济激励做出的额外假设。 假设是，验证人会希望采取所有预防措施，以保持容错，保持高可用，并最终在保持在共识过程中发挥其作用。 因为如果他们不这样做，他们会因为长期离线被强制剔除出验证人集合。
哨兵节点实现原理
在默认的的配置中将默认支持节点的发现。若将验证人配置中设置为不支持节点发现，这样也就保证了只有哨兵节点知道验证人的节点信息。

pex= false

将哨兵节点的ID@IP写在

persistent_peers =””

然后将验证人节点的节点ID写在哨兵节点的私有链接中
private_peer_ids = “”












































