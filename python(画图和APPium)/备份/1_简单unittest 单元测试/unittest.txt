概念
python的标准的单元测试框架，有独立的测试报告框架。

1.test fixture
用于初始化、清理等动作。
2.testcase
测试用例，unittest的最小单元。用以对指定输入的返回结果进行检测。在unittest中提供 了TestCase基类，用来创建新的测试用例类。
3.test suite
测试套件，一系列测试用例或测试套件的集合。在unittest中由TestSuite类实现。
4.test runner
测试执行器，负责用例执行并生成测试报告，在unittest中提供了命令行模式和GUI模式来执行。


unittest的流程：写好TestCase，然后由TestLoader加载TestCase到TestSuite，然后由TextTestRunner来运行TestSuite，运行的结果保存在TextTestResult中，我们通过命令行或者unittest.main()执行时，main会调用TextTestRunner中的run来执行

简单实例：
===================================
1）测试一个加法的函数。 hello.py
===================================
#导入unittest模块
import unittest

# 定义被测函数
def add(a, b):
    return a + b

# 测试用例 方法必须test开头
class demoTest(unittest.TestCase):
    def test_add(self):
        self.assertEquals(add(4,5),9);
    def test_add2(self):
        self.assertEquals(add(5,5),11)
    def test_add3(self):
        self.assertEquals(add(6,6),12)
# 主函数
# 当.py文件被直接运行时，if __name__ == '__main__'之下的代码块将被运行；当.py文件以模块形式被导入时，if __name__ == '__main__'之下的代码块不被运行。
if __name__ == '__main__':
     unittest.main()


===================================
2）使用TestSuite 套件  （注意 from ** import ***）test_1.py
===================================
import unittest
from hello import demoTest

if __name__ == '__main__':
    suite = unittest.TestSuite() #先创建一个suite实例

    tests = [demoTest("test_add"), demoTest("test_add2"), demoTest("test_add3")]
    suite.addTests(tests)

#verbosity 0 是简单报告、1 是一般报告、2 是详细报告。
    runner = unittest.TextTestRunner(verbosity=1)
    runner.run(suite)


===================================
3）测试结果写入文件  test_2.py
===================================
import unittest
from hello import demoTest

if __name__ == '__main__':
    suite = unittest.TestSuite()
    suite.addTests(unittest.TestLoader().loadTestsFromTestCase(demoTest))

    with open('UnittestTextReport.txt', 'a') as f:
        runner = unittest.TextTestRunner(stream=f, verbosity=2)
        runner.run(suite)



===================================
4）测试 test fixture 比如执行前需要连接数据库（准备环境）、执行完成之后需要还原数据、断开连接（清理环境）
===================================

class TestMathFunc(unittest.TestCase):
    """Test mathfuc.py"""

#每次case前，后都会运行一遍
    def setUp(self):
        print "do something before test.Prepare environment."

    def tearDown(self):
        print "do something after test.Clean up."



如果只想执行一次
    @classmethod
    def setUpClass(cls):
        print "This setUpClass() method only called once."

    @classmethod
    def tearDownClass(cls):
        print "This tearDownClass() method only called once too."


跳过某个case
    @unittest.skip("I don't want to run this case.")
    def test_divide(self):


===================================
5）输出漂亮的HTML报告 下载HTMLTestRunner.py，并放到当前目录下，或者你的’C:\Python27\Lib’下
===================================

import unittest
from hello import demoTest
from HTMLTestRunner import HTMLTestRunner

if __name__ == '__main__':
    suite = unittest.TestSuite()

    tests = [demoTest("test_add"), demoTest("test_add2"), demoTest("test_add3")]
    suite.addTests(tests)

    with open('HTMLReport.html', 'w') as f:
        runner = HTMLTestRunner(stream=f,
                                title='MathFunc Test Report',
                                description='generated by HTMLTestRunner.',
                                verbosity=2
                                )
        runner.run(suite)

===================================
5）新的小例子
===================================
import unittest

class Converter(object):
    def __init__(self, str):
        self.mystr = str

    def convert(self):
        self.mystr = self.mystr[::-1]  #反转字符串
        return self.mystr

class ConverterTest(unittest.TestCase):
    def test_convert1(self):
        value = Converter("abcd")
        self.assertEquals("dcba", value.convert())

    def test_convert2(self):
        value = Converter("hello world!")
        self.assertEquals("!dlrow olleh", value.convert())

if __name__ == "__main__":
    suite = unittest.TestSuite()
    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(ConverterTest))
    runner = unittest.TextTestRunner(verbosity=2)
    runner.run(suite)